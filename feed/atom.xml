<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title>Les Hill</title>
  <link href="http://feeds2.feedburner.com/leshill" type="application/atom+xml" rel="self" />
  <link href="http://blog.leshill.org/" type="text/html" rel="alternate" />
  <updated>2010-11-02T00:38:20-04:00</updated>
  <author>
    <name>Les Hill</name>
    <email>blog@leshill.org</email>
  </author>
  <id>http://blog.leshill.org/</id>
  
  <entry>
    <title>Heroku Environment Variables</title>
    <link rel="alternate" type="text/html" href="http://blog.leshill.org/blog/2010/11/02/heroku-environment-variables.html" />
    
    <id>tag:blog.leshill.org,2010-11-02:1288670966</id>
    
    <published>2010-11-02T00:09:26-04:00</published>
    <updated>2010-11-02T00:09:26-04:00</updated>
    <content type="html">&lt;h1&gt;Also Known As: Config Vars&lt;/h1&gt;
&lt;p&gt;Deploying an app to &lt;a href=&quot;http://heroku.com&quot;&gt;Heroku&lt;/a&gt; is awesome. Really. If you have not yet done so, it is worth spending the few minutes to setup a simple Rails app and deploy to Heroku.&lt;/p&gt;
&lt;p&gt;Awesome! Unless you have a lot of local configuration (perhaps your app talks to many external systems and has lots of settings). Then it becomes a bit less awesome, but we can fix that!&lt;/p&gt;
&lt;p&gt;Heroku handles local configuration with something Heroku calls &lt;em&gt;config variables&lt;/em&gt;. They are effectively environment variables, but I will follow Heroku&amp;#8217;s lead and call them &lt;em&gt;config variables&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Local configurations before Heroku&lt;/h2&gt;
&lt;p&gt;Before &lt;a href=&quot;http://heroku.com&quot;&gt;Heroku&lt;/a&gt;, the issue of how to keep local configurations, like database settings (including passwords) and API tokens, was resolved by having a file that was not checked into source control, but that was avaiable in all environments.&lt;/p&gt;
&lt;p&gt;An example we are all familiar with is Capistrano. One (or more) YAML (usually) files are setup locally on each host: your local development box, the staging server, the production server.  On the deployment hosts (i.e. staging, production) these files are located in the Capistrano shared directory and symlinked during the deploy so that the application can read them to load any configurations.&lt;/p&gt;
&lt;h2&gt;Local configurations with Heroku&lt;/h2&gt;
&lt;p&gt;Heroku applications cannot use local storage in the same way. There is no directory available to store your applications configuration files locally; and you do not want them in source control&lt;sup class=&quot;footnote&quot; id=&quot;fnr1&quot;&gt;&lt;a href=&quot;#fn1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Heroku instead provides each application with user defined config variables that are available in the your application&amp;#8217;s &lt;code&gt;ENV&lt;/code&gt; hash. If, for example, you are configuring &lt;code&gt;omniauth&lt;/code&gt; with Twitter support, you might have this code in &lt;strong&gt;config/initializers/omniauth.rb&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;Rails&lt;/span&gt;.application.config.middleware.use &lt;span class=&quot;co&quot;&gt;OmniAuth&lt;/span&gt;::&lt;span class=&quot;co&quot;&gt;Builder&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;2&lt;/span&gt;   provider &lt;span class=&quot;sy&quot;&gt;:twitter&lt;/span&gt;, &lt;span class=&quot;co&quot;&gt;ENV&lt;/span&gt;[&lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;TWITTER_KEY&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;], &lt;span class=&quot;co&quot;&gt;ENV&lt;/span&gt;[&lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;TWITTER_SECRET&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]
&lt;span class=&quot;no&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Your app will read the configuration from the &lt;code&gt;ENV&lt;/code&gt; hash. You use the &lt;code&gt;heroku&lt;/code&gt; command to set the config variables:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;heroku config:add TWITTER_KEY=key TWITTER_SECRET=secret --app myapp&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This quickly becomes painful if you have to do this many times on many Heroku applications. After googling around for a bit, I found one article by &lt;a href=&quot;http://tammersaleh.com/posts/managing-heroku-environment-variables-for-local-development&quot;&gt;Tammer Saleh&lt;/a&gt; that provided a bit of inspiration.&lt;/p&gt;
&lt;h1&gt;Managing Heroku config variables using a local YAML file&lt;/h1&gt;
&lt;p&gt;We can make things better by using a local file on your development machine to manage all the settings in one place.&lt;/p&gt;
&lt;p&gt;Lets save our configuration to &lt;code&gt;config/heroku.yml&lt;/code&gt; which looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apps:
  staging: myapp-staging
  production: myapp
development: &amp;amp;defaults
  admins: 'joe sue'
  domain_url: http://localhost:3000
  twitter_key: key
  twitter_secret: secret
test:
  &amp;lt;&amp;lt;: *defaults
staging:
  admins: 'joe sue'
  domain_url: http://myapp-staging.heroku.com
  twitter_key: key
  twitter_secret: secret
production:
  admins: 'joe sue'
  domain_url: http://myapp.heroku.com
  twitter_key: key
  twitter_secret: secret&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The file should seem familiar; it is organized very much like the Rails &lt;code&gt;database.yml&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;apps&lt;/code&gt; key defines a mapping from an environment name like &lt;code&gt;staging&lt;/code&gt; to a Heroku application like &lt;code&gt;myapp-staging&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Each environment key has its own settings. Note that &lt;code&gt;development&lt;/code&gt; and &lt;code&gt;test&lt;/code&gt; are not named under the &lt;code&gt;apps&lt;/code&gt; key as they local and are not deployed to Heroku.&lt;/p&gt;
&lt;p&gt;This file &lt;strong&gt;is not checked in&lt;/strong&gt; and should be added to your &lt;code&gt;.gitignore&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To load our YAML settings file at runtime, we have to modify &lt;code&gt;config/application.rb&lt;/code&gt; and add a new file: &lt;code&gt;config/heroku_env.rb&lt;/code&gt; (all files are on &lt;a href=&quot;http://github.com/leshill/heroku-thor&quot;&gt;github&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;We make the following modification to the top of  &lt;code&gt;config/application.rb&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt;1&lt;/span&gt; require &lt;span class=&quot;co&quot;&gt;File&lt;/span&gt;.expand_path(&lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;../boot&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pc&quot;&gt;__FILE__&lt;/span&gt;)
&lt;span class=&quot;no&quot;&gt;2&lt;/span&gt; 
&lt;span class=&quot;no&quot;&gt;3&lt;/span&gt; require &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;rails&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;4&lt;/span&gt; 
&lt;span class=&quot;no&quot;&gt;5&lt;/span&gt; load(&lt;span class=&quot;co&quot;&gt;File&lt;/span&gt;.expand_path(&lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;../heroku_env.rb&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pc&quot;&gt;__FILE__&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Our app is now reading our YAML file and populating the application&amp;#8217;s &lt;code&gt;ENV&lt;/code&gt; hash based our settings file when we run locally.&lt;/p&gt;
&lt;p&gt;To set the config variables on Heroku, we copy &lt;code&gt;heroku.thor&lt;/code&gt; (yes, &lt;a href=&quot;http://github.com/leshill/heroku-thor&quot;&gt;github&lt;/a&gt;) to our &lt;code&gt;lib/tasks&lt;/code&gt; directory.&lt;/p&gt;
&lt;p&gt;It defines two tasks for each of your Heroku apps: &lt;code&gt;config&lt;/code&gt; to set the config variables from the settings files, and &lt;code&gt;rack_env&lt;/code&gt; to set the &lt;code&gt;RACK_ENV&lt;/code&gt; config variable.&lt;/p&gt;
&lt;p&gt;We use &lt;code&gt;thor deploy:staging:config&lt;/code&gt; to setup our config variables on our Heroku staging application.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;% thor deploy:staging:config
heroku config:add ADMINS='joe sue' DOMAIN_URL='http://myappp-staging.heroku.com' TWITTER_KEY='key' TWITTER_SECRET='secret' --app myapp-staging
Adding config vars:
  ADMINS         =&amp;gt; joe sue
  DOMAIN_URL     =&amp;gt; http://myapp-staging.heroku.com
  TWITTER_KEY    =&amp;gt; key
  TWITTER_SECRET =&amp;gt; secret
Restarting app...done.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And your app is now configured.&lt;/p&gt;
&lt;h2&gt;Better?&lt;/h2&gt;
&lt;p&gt;I have found this approach to managing my Heroku apps useful. One way it can be improved is by extending the &lt;code&gt;thor&lt;/code&gt; file to include common Heroku commands such as deploys (and you could use &lt;code&gt;invoke&lt;/code&gt; to chain together the deploy and configuration settings).&lt;/p&gt;
&lt;p&gt;Still, I am not pleased. Mostly this is because I have not packaged this up nicely. The need for locally modified files makes this a candidate for a Rails generator, something I may do if I get the time.&lt;/p&gt;
&lt;p&gt;For now the raw source is up on &lt;a href=&quot;http://github.com/leshill/heroku-thor&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;footnote&quot; id=&quot;fn1&quot;&gt;&lt;a href=&quot;#fnr1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; Really.&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>Everyone's first Rails app</title>
    <link rel="alternate" type="text/html" href="http://blog.leshill.org/blog/2010/09/23/diaspora.html" />
    
    <id>tag:blog.leshill.org,2010-09-23:1285253154</id>
    
    <published>2010-09-23T10:45:54-04:00</published>
    <updated>2010-09-23T10:45:54-04:00</updated>
    <content type="html">&lt;p&gt;There are some rumblings in the Ruby community now about the recently released &lt;a href=&quot;http://www.joindiaspora.com/&quot;&gt;Diaspora&lt;/a&gt; and the quality of its codebase.&lt;/p&gt;
&lt;p&gt;I took a look at it on the day it was released. What I saw was everyone&amp;#8217;s first Rails app. The code looked like it had been written directly after reading a tutorial or a book.&lt;/p&gt;
&lt;p&gt;This is not a bad thing. We all started with Rails and wrote an app like that.  It is the first step on the journey to mastery.&lt;/p&gt;
&lt;p&gt;Unfortunately for the Diaspora team, they have done this in public and with a great expectations and corresponding hype (Diaspora has been called a &lt;em&gt;Facebook Killer&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Fortunately for the Diaspora team, they have done this in public with a &lt;a href=&quot;http://github.com/diaspora/diaspora&quot;&gt;github repository&lt;/a&gt; that others can contribute to&lt;sup class=&quot;footnote&quot; id=&quot;fnr1&quot;&gt;&lt;a href=&quot;#fn1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; and make better.&lt;/p&gt;
&lt;p class=&quot;footnote&quot; id=&quot;fn1&quot;&gt;&lt;a href=&quot;#fnr1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; Sort of. I, and others, would have preferred an MIT license.&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>Cucumber Tips</title>
    <link rel="alternate" type="text/html" href="http://blog.leshill.org/blog/2010/09/19/cucumber-tips.html" />
    
    <id>tag:blog.leshill.org,2010-09-19:1284953752</id>
    
    <published>2010-09-19T23:35:52-04:00</published>
    <updated>2010-09-19T23:35:52-04:00</updated>
    <content type="html">&lt;p&gt;As a happy &lt;a href=&quot;http://cukes.info&quot;&gt;Cucumber&lt;/a&gt; user, I am really glad to see that a few of my favorite Rubyists have recently blogged some tips for using &lt;strong&gt;Cucumber&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;Jonas Nicklas &lt;a href=&quot;http://elabs.se/blog/15-you-re-cuking-it-wrong&quot;&gt;You&amp;#8217;re Cuking It Wrong&lt;/a&gt;&lt;br /&gt;
Mislav Marohnić &lt;a href=&quot;http://mislav.uniqpath.com/2010/09/cuking-it-right/&quot;&gt;You&amp;#8217;re cuking it right&lt;/a&gt;&lt;br /&gt;
Bodaniel Jeanes &lt;a href=&quot;http://bjeanes.com/2010/09/19/selector-free-cucumber-scenarios&quot;&gt;Selector-Free Cucumber Scenarios&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks guys!&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>Releasing A Gem? Read This Post!</title>
    <link rel="alternate" type="text/html" href="http://blog.leshill.org/blog/2010/07/19/releasing-a-gem-read-this-post.html" />
    
    <id>tag:blog.leshill.org,2010-07-19:1279512275</id>
    
    <published>2010-07-19T00:04:35-04:00</published>
    <updated>2010-07-19T00:04:35-04:00</updated>
    <content type="html">&lt;p&gt;One of the great things about the Ruby community is that we are very happy to release our code; to contribute back to the community. &lt;a href=&quot;http://rubygems.org&quot;&gt;RubyGems&lt;/a&gt; and &lt;a href=&quot;http://github.com&quot;&gt;github&lt;/a&gt; make it ridiculously easy.&lt;/p&gt;
&lt;p&gt;Another great thing about the Ruby community is that we also like to help out. Maybe, someone wants to fix a bug, or perhaps sees an opportunity for a new feature, or just wants to help make the code better.&lt;/p&gt;
&lt;p&gt;Lately, for whatever reason&lt;sup class=&quot;footnote&quot; id=&quot;fnr1&quot;&gt;&lt;a href=&quot;#fn1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, I have been running across well-used gems that passively discourage contributions because their development environment setup is disastrous&lt;sup class=&quot;footnote&quot; id=&quot;fnr2&quot;&gt;&lt;a href=&quot;#fn2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Anyone should be able to contribute to your gem after doing this&lt;sup class=&quot;footnote&quot; id=&quot;fnr3&quot;&gt;&lt;a href=&quot;#fn3&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;% git clone http://github.com/leshill/makes_coffee.git
% cd makes_coffee
% cat &amp;gt; .rvmrc
rvm_gemset_create_on_use_flag=1
rvm gemset use makes_coffee
^D
% cd .
% gem install bundler
% bundle install
% rake
...All specs pass...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That is all&lt;sup class=&quot;footnote&quot; id=&quot;fnr4&quot;&gt;&lt;a href=&quot;#fn4&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; it should take to get a development environment up and running for your gem.&lt;/p&gt;
&lt;p class=&quot;footnote&quot; id=&quot;fn1&quot;&gt;&lt;a href=&quot;#fnr1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; We are using &lt;em&gt;Rails 3&lt;/em&gt;.&lt;/p&gt;
&lt;p class=&quot;footnote&quot; id=&quot;fn2&quot;&gt;&lt;a href=&quot;#fnr2&quot;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; It is disastrous if I have to repeatedly run &lt;code&gt;rake&lt;/code&gt; and look at stack traces for me to discern exactly what needs to be done to get a working development environment.&lt;/p&gt;
&lt;p class=&quot;footnote&quot; id=&quot;fn3&quot;&gt;&lt;a href=&quot;#fnr3&quot;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; Yea, I am using &lt;code&gt;bundler&lt;/code&gt; and &lt;code&gt;rvm&lt;/code&gt;. You should be too.&lt;sup class=&quot;footnote&quot; id=&quot;fnr5&quot;&gt;&lt;a href=&quot;#fn5&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot; id=&quot;fn4&quot;&gt;&lt;a href=&quot;#fnr4&quot;&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt; Yea, the &lt;code&gt;rvmrc&lt;/code&gt; step should not need to be there :) Oh and there may need to be more done, like setting up a database. Put it in the &lt;code&gt;README&lt;/code&gt;.&lt;/p&gt;
&lt;p class=&quot;footnote&quot; id=&quot;fn5&quot;&gt;&lt;a href=&quot;#fnr5&quot;&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt; Or your gem has a development setup in the &lt;code&gt;README&lt;/code&gt; or wiki, like &lt;a href=&quot;http://github.com/rspec/rspec-dev&quot;&gt;RSpec&lt;/a&gt;.&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>resque_spec for RSpec and Cucumber</title>
    <link rel="alternate" type="text/html" href="http://blog.leshill.org/blog/2010/06/13/resque-spec-for-rspec-and-cucumber.html" />
    
    <id>tag:blog.leshill.org,2010-06-13:1276467017</id>
    
    <published>2010-06-13T18:10:17-04:00</published>
    <updated>2010-06-13T18:10:17-04:00</updated>
    <content type="html">&lt;p&gt;&lt;code&gt;resque_spec&lt;/code&gt; is a simple RSpec and Cucumber matcher for &lt;a href=&quot;http://github.com/defunkt/resque&quot;&gt;Resque&lt;/a&gt; , loosely based on &lt;a href=&quot;http://github.com/justinweiss/resque_unit&quot;&gt;resque_unit&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;Install it as a gem:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;% gem install resque_spec&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Given this scenario&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt;1&lt;/span&gt; Given a person
&lt;span class=&quot;no&quot;&gt;2&lt;/span&gt; When I recalculate
&lt;span class=&quot;no&quot;&gt;3&lt;/span&gt; Then the person has calculate queued&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;And I write this spec using the &lt;code&gt;resque_spec&lt;/code&gt; matcher&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt; 1&lt;/span&gt; describe &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;#recalculate&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 2&lt;/span&gt;   before &lt;span class=&quot;r&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 3&lt;/span&gt;     &lt;span class=&quot;co&quot;&gt;ResqueSpec&lt;/span&gt;.reset!
&lt;span class=&quot;no&quot;&gt; 4&lt;/span&gt;   &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 5&lt;/span&gt; 
&lt;span class=&quot;no&quot;&gt; 6&lt;/span&gt;   it &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;adds person.calculate to the Person queue&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 7&lt;/span&gt;     person.recalculate
&lt;span class=&quot;no&quot;&gt; 8&lt;/span&gt;     &lt;span class=&quot;co&quot;&gt;Person&lt;/span&gt;.should have_queued(person.id, &lt;span class=&quot;sy&quot;&gt;:calculate&lt;/span&gt;)
&lt;span class=&quot;no&quot;&gt; 9&lt;/span&gt;   &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;(And I take note of the &lt;code&gt;before&lt;/code&gt; block that is calling &lt;code&gt;reset!&lt;/code&gt; for every spec)&lt;/p&gt;
&lt;p&gt;And I might write this as a Cucumber step&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;Then&lt;/span&gt; &lt;span class=&quot;rx&quot;&gt;&lt;span class=&quot;dl&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;the (&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\w&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;?) has (&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\w&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;?) queued&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;/&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;do&lt;/span&gt; |thing, method|
&lt;span class=&quot;no&quot;&gt;2&lt;/span&gt;   thing_obj = instance_variable_get(&lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;il&quot;&gt;&lt;span class=&quot;idl&quot;&gt;#{&lt;/span&gt;thing&lt;span class=&quot;idl&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;no&quot;&gt;3&lt;/span&gt;   thing_obj.class.should have_queued(thing_obj.id, method.to_sym)
&lt;span class=&quot;no&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Then I write some code to make it pass:&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;cl&quot;&gt;Person&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;iv&quot;&gt;@queue&lt;/span&gt; = &lt;span class=&quot;sy&quot;&gt;:people&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;3&lt;/span&gt; 
&lt;span class=&quot;no&quot;&gt;4&lt;/span&gt;   &lt;span class=&quot;r&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;recalculate&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;5&lt;/span&gt;     &lt;span class=&quot;co&quot;&gt;Resque&lt;/span&gt;.enqueue(&lt;span class=&quot;co&quot;&gt;Person&lt;/span&gt;, id, &lt;span class=&quot;sy&quot;&gt;:calculate&lt;/span&gt;)
&lt;span class=&quot;no&quot;&gt;6&lt;/span&gt;   &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The source is up on &lt;a href=&quot;http://github.com/leshill/resque_spec&quot;&gt;github&lt;/a&gt; .&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>Rails 3, RSpec, Factory Girl, Haml, and jQuery</title>
    <link rel="alternate" type="text/html" href="http://blog.leshill.org/blog/2010/05/08/rails-3-rspec-factory-girl-haml-and-jquery.html" />
    
    <id>tag:blog.leshill.org,2010-05-08:1273377370</id>
    
    <published>2010-05-08T23:56:10-04:00</published>
    <updated>2010-05-08T23:56:10-04:00</updated>
    <content type="html">&lt;p&gt;Easily generate a Rails 3 application with RSpec, Factory Girl, Haml, and jQuery in one line:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;% rails new my_app -J -T -m \
    http://github.com/leshill/rails3-app/raw/master/app.rb&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;rvm&lt;/h2&gt;
&lt;p&gt;We love &lt;code&gt;rvm&lt;/code&gt;, so the application has an &lt;code&gt;.rvmrc&lt;/code&gt; generated to specify a gemset.&lt;/p&gt;
&lt;h2&gt;Generators&lt;/h2&gt;
&lt;p&gt;This also gives you the Factory Girl and Haml Rails 3 generators &amp;mdash; the generators for RSpec are in the RSpec gem &amp;mdash; so that your factories and views are generated using Factory Girl and Haml, and that all your generated tests are specs. These generators are from the &lt;strong&gt;rails3_generators&lt;/strong&gt; gem, we pulled them out to avoid all the other dependencies included in that gem.&lt;/p&gt;
&lt;h2&gt;JavaScript Includes&lt;/h2&gt;
&lt;p&gt;Since the Rails helper &lt;code&gt;javascript_include_tag :defaults&lt;/code&gt; is looking for Prototype, we used &lt;a href=&quot;http://flow.handle.it/past/2010/2/9/jquery_in_rails&quot;&gt;this&lt;/a&gt; to add a new JavaScript expansion to pull in the jQuery libraries. Use it like so:&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt;1&lt;/span&gt; = javascript_include_tag &lt;span class=&quot;sy&quot;&gt;:jquery&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h2&gt;git&lt;/h2&gt;
&lt;p&gt;We love &lt;code&gt;git&lt;/code&gt;, so the application has a git repo initialized with all the initial changes staged.&lt;/p&gt;
&lt;h2&gt;Wrap Up&lt;/h2&gt;
&lt;p&gt;After the application has been generated, there are a few clean up commands to run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  % cd my_app
  % gem install bundler
  % bundle install
  % bundle lock
  % script/rails generate rspec:install&lt;/code&gt;&lt;/pre&gt;</content>
  </entry>
  
  <entry>
    <title>Binary Search, TDD, and You</title>
    <link rel="alternate" type="text/html" href="http://blog.leshill.org/blog/2010/04/26/binary-search-tdd-and-you.html" />
    
    <id>tag:blog.leshill.org,2010-04-26:1272337358</id>
    
    <published>2010-04-26T23:02:38-04:00</published>
    <updated>2010-04-26T23:02:38-04:00</updated>
    <content type="html">&lt;p&gt;A bit late to the party, I took a programming challenge from &lt;a href=&quot;http://reprog.wordpress.com/2010/04/19/are-you-one-of-the-10-percent/&quot;&gt;Mike Taylor&lt;/a&gt; :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Are you one of the 10% of programmers who can write a binary search?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The &lt;strong&gt;10%&lt;/strong&gt; is a reference to an essay by Jon Bentley, who found that only&lt;br /&gt;
&lt;strong&gt;10%&lt;/strong&gt; of the programmers asked could write a binary search correctly given a&lt;br /&gt;
description of the algorithm. The challenge from Mike was to write it without&lt;br /&gt;
any &lt;strong&gt;TESTING&lt;/strong&gt; whatsoever.&lt;/p&gt;
&lt;p&gt;Here is my answer in Ruby:&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;binary_search&lt;/span&gt;(value, array, start, finish = array.length - &lt;span class=&quot;i&quot;&gt;1&lt;/span&gt;)
&lt;span class=&quot;no&quot;&gt; 2&lt;/span&gt;   &lt;span class=&quot;r&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;-1&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;if&lt;/span&gt; finish &amp;lt; start
&lt;span class=&quot;no&quot;&gt; 3&lt;/span&gt;   mid = (start + finish)/&lt;span class=&quot;i&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 4&lt;/span&gt;   &lt;span class=&quot;r&quot;&gt;if&lt;/span&gt; array[mid] == value
&lt;span class=&quot;no&quot;&gt; 5&lt;/span&gt;     mid
&lt;span class=&quot;no&quot;&gt; 6&lt;/span&gt;   &lt;span class=&quot;r&quot;&gt;elsif&lt;/span&gt; array[mid] &amp;lt; value
&lt;span class=&quot;no&quot;&gt; 7&lt;/span&gt;     binary_search(value, array, mid + &lt;span class=&quot;i&quot;&gt;1&lt;/span&gt;, finish)
&lt;span class=&quot;no&quot;&gt; 8&lt;/span&gt;   &lt;span class=&quot;r&quot;&gt;else&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 9&lt;/span&gt;     binary_search(value, array, start, mid - &lt;span class=&quot;i&quot;&gt;1&lt;/span&gt;)
&lt;span class=&quot;no&quot;&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;/span&gt;   &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Pretty standard. This was about 1/2 an hour from start to finish; mostly due to&lt;br /&gt;
not being able to run the code&lt;sup class=&quot;footnote&quot; id=&quot;fnr1&quot;&gt;&lt;a href=&quot;#fn1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; and obsessing over whether I had handled all&lt;br /&gt;
the edge cases, which is related to my motivation for taking the challenge.&lt;/p&gt;
&lt;p&gt;Aside from being a fun exercise, the comments Mike received led him to write&lt;br /&gt;
two more blog posts!&lt;/p&gt;
&lt;p&gt;The third in the series, &lt;a href=&quot;http://reprog.wordpress.com/2010/04/23/testing-is-not-a-substitute-for-thinking-binary-search-part-3/&quot; title=&quot;binary&lt;br /&gt;
search part&lt;br /&gt;
3&quot;&gt;Testing is not a substitute for thinking&lt;/a&gt;&lt;br /&gt;
has some interesting and keen observations. I agree with most of them.&lt;/p&gt;
&lt;p&gt;However, the conclusion is absolutely, categorically wrong.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Bearing in mind that binary search is in fact a pretty&lt;br /&gt;
simple algorithm, it’s likely true that you could have&lt;br /&gt;
bashed your way through to a working implementation after&lt;br /&gt;
a few iterations of coding and testing.  But –&lt;/p&gt;
&lt;p&gt;Your code would be less clear&lt;/p&gt;
&lt;p&gt;You wouldn’t understand clearly why it works&lt;/p&gt;
&lt;p&gt;You would find it harder to extend or modify in future&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Inflammatory stuff. And totally &lt;strong&gt;wrong&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;A few paragraphs earlier, Mike lays out why he thinks this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;By using skills that are not often thought about&lt;br /&gt;
in these days of test-driven kool-ade, reflexive&lt;br /&gt;
application of design patterns and automatic refactoring&lt;br /&gt;
tools.  Once more, let me be clear that all these things&lt;br /&gt;
are good so far as they go — really, I agree with you,&lt;br /&gt;
they are! — but they are no substitute for actually&lt;br /&gt;
thinking, and thinking is what’s needed for hard problems.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Indeed thinking is what is needed for hard problems. What Mike has failed to&lt;br /&gt;
acknowledge is that TDD is not a tool for writing code, TDD is a tool for&lt;br /&gt;
thinking clearly.&lt;/p&gt;
&lt;p&gt;As an example of this, in the spirit of Mike&amp;#8217;s challenge, I expressly wrote the&lt;br /&gt;
binary search code without test-driving it. However, instead of writing the&lt;br /&gt;
code directly from the description, I turned the description into a set of&lt;br /&gt;
constraints. As each of those constraints became clear, I wrote code. And in&lt;br /&gt;
the end I had a working binary search&lt;sup class=&quot;footnote&quot; id=&quot;fnr2&quot;&gt;&lt;a href=&quot;#fn2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;So, am I saying Mike is an idiot? Absolutely not! After hearing more and more&lt;br /&gt;
critiques (both thoughtful and thoughtless) of TDD, I am coming around to the&lt;br /&gt;
conclusion that there is a problem. The problem is most people learn TDD&lt;br /&gt;
from a book or a blog or even from a vague description and some positive can-do&lt;br /&gt;
attitude (Commendable!  Really!)&lt;/p&gt;
&lt;p&gt;What has become apparent is that this will not work for most developers. What&lt;br /&gt;
does work is deliberate study and mentoring, ideally by pairing.  A mentor who&lt;br /&gt;
is showing you more than just the syntactic mechanics of writing test code and&lt;br /&gt;
having it invoke the code under test. Someone who is explaining how tests are a&lt;br /&gt;
tool for understanding and solving the problem.&lt;/p&gt;
&lt;p&gt;Folks interested in Software Craftsmanship have realized this truth about all&lt;br /&gt;
aspects of software development: you learn better from a mentor and from&lt;br /&gt;
deliberate practice.&lt;/p&gt;
&lt;p&gt;TDD is no exception.&lt;/p&gt;
&lt;p class=&quot;footnote&quot; id=&quot;fn1&quot;&gt;&lt;a href=&quot;#fnr1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; Sort-of, according to Mike&amp;#8217;s rules I could have shaken out syntax errors&lt;br /&gt;
by running the code; in the case of Ruby, that felt like cheating, so I just&lt;br /&gt;
stared at it.&lt;/p&gt;
&lt;p class=&quot;footnote&quot; id=&quot;fn2&quot;&gt;&lt;a href=&quot;#fnr2&quot;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; After the fact, I threw in a test scaffold to verify that it does work,&lt;br /&gt;
and that it is log(2)N.&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>Dynamic Load Paths in OSX</title>
    <link rel="alternate" type="text/html" href="http://blog.leshill.org/blog/2010/04/24/dynamic-load-paths-in-osx.html" />
    
    <id>tag:blog.leshill.org,2010-04-24:1272165152</id>
    
    <published>2010-04-24T23:12:32-04:00</published>
    <updated>2010-04-24T23:12:32-04:00</updated>
    <content type="html">&lt;p&gt;This came up recently in the context of &lt;strong&gt;OSX&lt;/strong&gt; 10.5, &lt;code&gt;rvm&lt;/code&gt;, &lt;code&gt;nokogiri&lt;/code&gt;, and &lt;code&gt;libxml2&lt;/code&gt;. The issue is that the shipped &lt;code&gt;libxml2&lt;/code&gt; for Leopard is old, and when using &lt;code&gt;rvm&lt;/code&gt; with a compiled &lt;code&gt;ruby&lt;/code&gt; which uses the system installed &lt;code&gt;libxml2&lt;/code&gt;, &lt;code&gt;nokogiri&lt;/code&gt; will give this friendly message:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;HI.  You&amp;#8217;re using libxml2 version 2.6.16 which is over 4&lt;br /&gt;
years old and has plenty of bugs.  We suggest that for maximum&lt;br /&gt;
HTML/XML parsing pleasure, you upgrade your version of&lt;br /&gt;
libxml2 and re-install nokogiri.  If you like using libxml2&lt;br /&gt;
version 2.6.16, but don&amp;#8217;t like this warning, please&lt;br /&gt;
define the constant&lt;br /&gt;
I_KNOW_I_AM_USING_AN_OLD_AND_BUGGY_VERSION_OF_LIBXML2&lt;br /&gt;
before requring nokogiri.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This becomes a problem when you have explicitly added a newer version of &lt;code&gt;libxml2&lt;/code&gt;, for example with &lt;a href=&quot;http://mxcl.github.com/homebrew/&quot;&gt;Homebrew&lt;/a&gt; , and &lt;code&gt;ruby&lt;/code&gt; is not finding it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;OSX&lt;/strong&gt; handles its shared library load paths this way&lt;sup class=&quot;footnote&quot; id=&quot;fnr1&quot;&gt;&lt;a href=&quot;#fn1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Find the requested library using &lt;strong&gt;DYLD_LIBRARY_PATH&lt;/strong&gt;&lt;sup class=&quot;footnote&quot; id=&quot;fnr2&quot;&gt;&lt;a href=&quot;#fn2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
	&lt;li&gt;Find the requested library where the binary thinks it should be&lt;/li&gt;
	&lt;li&gt;Find the requested library using &lt;strong&gt;DYLD_FALLBACK_LIBRARY_PATH&lt;/strong&gt;&lt;sup class=&quot;footnote&quot; id=&quot;fnr3&quot;&gt;&lt;a href=&quot;#fn3&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To make &lt;code&gt;ruby&lt;/code&gt; find your &lt;code&gt;libxml2&lt;/code&gt;, set the &lt;strong&gt;DYLD_LIBRARY_PATH&lt;/strong&gt; environment variable to include the path to where it is installed, for example &lt;code&gt;/usr/local/lib&lt;/code&gt;. In my case, I set it like so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;% export DYLD_LIBRARY_PATH=/usr/local/lib&lt;/code&gt;&lt;/pre&gt;
&lt;p class=&quot;footnote&quot; id=&quot;fn1&quot;&gt;&lt;a href=&quot;#fnr1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; This is a first order approximation, there are plenty of missing nuances here.&lt;/p&gt;
&lt;p class=&quot;footnote&quot; id=&quot;fn2&quot;&gt;&lt;a href=&quot;#fnr2&quot;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; This is a colon seperated path variable.&lt;/p&gt;
&lt;p class=&quot;footnote&quot; id=&quot;fn3&quot;&gt;&lt;a href=&quot;#fnr3&quot;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; Also a colon separated path variable; the default is &lt;code&gt;$(HOME)/lib:/usr/local/lib:/lib:/usr/lib&lt;/code&gt;&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>Validating Presence with Nested Models</title>
    <link rel="alternate" type="text/html" href="http://blog.leshill.org/blog/2010/04/20/validating-presence-with-nested-models.html" />
    
    <id>tag:blog.leshill.org,2010-04-20:1271796403</id>
    
    <published>2010-04-20T16:46:43-04:00</published>
    <updated>2010-04-20T16:46:43-04:00</updated>
    <content type="html">&lt;p&gt;A nifty little problem with a simple, lightly-documented solution came up recently while I was working on a &lt;em&gt;super-duper-top-secret-and-totally-awesome&lt;/em&gt; app for a client.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;accepts_nested_attributes_for&lt;/code&gt; has been a boon in Rails 2.3 and a great replacement for the venerable &lt;code&gt;attribute_fu&lt;/code&gt;. Under normal circumstances, you would use it like this to allow you to save an associated model thorough the parent model:&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;cl&quot;&gt;Book&lt;/span&gt; &amp;lt; &lt;span class=&quot;co&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;co&quot;&gt;Base&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;2&lt;/span&gt;   has_many &lt;span class=&quot;sy&quot;&gt;:chapters&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;3&lt;/span&gt; 
&lt;span class=&quot;no&quot;&gt;4&lt;/span&gt;   accepts_nested_attributes_for &lt;span class=&quot;sy&quot;&gt;:chapters&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;In your forms, you can use &lt;code&gt;fields_for&lt;/code&gt; to specify associated &lt;code&gt;Chapter&lt;/code&gt; models. With a little &lt;strong&gt;JavaScript-fu&lt;/strong&gt;, you can craft a form to create a &lt;code&gt;Book&lt;/code&gt; with multiple &lt;code&gt;Chapters&lt;/code&gt; all at once, without a lot of controller code. With a little more &lt;strong&gt;JavaScript&lt;/strong&gt; and an option to &lt;code&gt;accepts_nested_attributes_for&lt;/code&gt; you can enable deletions:&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;cl&quot;&gt;Book&lt;/span&gt; &amp;lt; &lt;span class=&quot;co&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;co&quot;&gt;Base&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;2&lt;/span&gt;   has_many &lt;span class=&quot;sy&quot;&gt;:chapters&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;3&lt;/span&gt; 
&lt;span class=&quot;no&quot;&gt;4&lt;/span&gt;   accepts_nested_attributes_for &lt;span class=&quot;sy&quot;&gt;:chapters&lt;/span&gt;,
&lt;span class=&quot;no&quot;&gt;5&lt;/span&gt;     &lt;span class=&quot;sy&quot;&gt;:allow_destroy&lt;/span&gt; =&amp;gt; &lt;span class=&quot;pc&quot;&gt;true&lt;/span&gt;,
&lt;span class=&quot;no&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;At this point, you may want to detect and reject empty associated models like this:&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;cl&quot;&gt;Book&lt;/span&gt; &amp;lt; &lt;span class=&quot;co&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;co&quot;&gt;Base&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;2&lt;/span&gt;   has_many &lt;span class=&quot;sy&quot;&gt;:chapters&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;3&lt;/span&gt; 
&lt;span class=&quot;no&quot;&gt;4&lt;/span&gt;   accepts_nested_attributes_for &lt;span class=&quot;sy&quot;&gt;:chapters&lt;/span&gt;,
&lt;span class=&quot;no&quot;&gt;5&lt;/span&gt;     &lt;span class=&quot;sy&quot;&gt;:allow_destroy&lt;/span&gt; =&amp;gt; &lt;span class=&quot;pc&quot;&gt;true&lt;/span&gt;,
&lt;span class=&quot;no&quot;&gt;6&lt;/span&gt;     &lt;span class=&quot;sy&quot;&gt;:reject_if&lt;/span&gt; =&amp;gt; proc {|attrs| attrs[&lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;].blank? }
&lt;span class=&quot;no&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The wrinkle comes in if you also want to validate that you always have at least &lt;strong&gt;one&lt;/strong&gt; associated model. You might think of doing the following, which is close, but does not work in all situations:&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;cl&quot;&gt;Book&lt;/span&gt; &amp;lt; &lt;span class=&quot;co&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;co&quot;&gt;Base&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 2&lt;/span&gt;   has_many &lt;span class=&quot;sy&quot;&gt;:chapters&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 3&lt;/span&gt; 
&lt;span class=&quot;no&quot;&gt; 4&lt;/span&gt;   accepts_nested_attributes_for &lt;span class=&quot;sy&quot;&gt;:chapters&lt;/span&gt;,
&lt;span class=&quot;no&quot;&gt; 5&lt;/span&gt;     &lt;span class=&quot;sy&quot;&gt;:allow_destroy&lt;/span&gt; =&amp;gt; &lt;span class=&quot;pc&quot;&gt;true&lt;/span&gt;,
&lt;span class=&quot;no&quot;&gt; 6&lt;/span&gt;     &lt;span class=&quot;sy&quot;&gt;:reject_if&lt;/span&gt; =&amp;gt; proc {|attrs| attrs[&lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;].blank? }
&lt;span class=&quot;no&quot;&gt; 7&lt;/span&gt; 
&lt;span class=&quot;no&quot;&gt; 8&lt;/span&gt;   validate &lt;span class=&quot;sy&quot;&gt;:must_have_one_chapter&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 9&lt;/span&gt; 
&lt;span class=&quot;no&quot;&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;/span&gt;   &lt;span class=&quot;r&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;must_have_one_chapter&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;11&lt;/span&gt;     errors.add(&lt;span class=&quot;sy&quot;&gt;:chapters&lt;/span&gt;, &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;must have one chapter&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) &lt;span class=&quot;r&quot;&gt;if&lt;/span&gt; chapters_empty?
&lt;span class=&quot;no&quot;&gt;12&lt;/span&gt;   &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;13&lt;/span&gt; 
&lt;span class=&quot;no&quot;&gt;14&lt;/span&gt;   &lt;span class=&quot;r&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;chapters_empty?&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;15&lt;/span&gt;     chapters.empty?
&lt;span class=&quot;no&quot;&gt;16&lt;/span&gt;   &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;17&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;This works except when you are destroying an associated model; the &lt;code&gt;destroy&lt;/code&gt; occurs &lt;strong&gt;after&lt;/strong&gt; the validations have been run, making &lt;code&gt;chapters_empty?&lt;/code&gt; true. The fix is to check the associated models to see if they are &lt;code&gt;marked_for_destruction&lt;/code&gt; during the &lt;code&gt;save&lt;/code&gt;, like so:&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;cl&quot;&gt;Book&lt;/span&gt; &amp;lt; &lt;span class=&quot;co&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;co&quot;&gt;Base&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 2&lt;/span&gt;   has_many &lt;span class=&quot;sy&quot;&gt;:chapters&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 3&lt;/span&gt; 
&lt;span class=&quot;no&quot;&gt; 4&lt;/span&gt;   accepts_nested_attributes_for &lt;span class=&quot;sy&quot;&gt;:chapters&lt;/span&gt;,
&lt;span class=&quot;no&quot;&gt; 5&lt;/span&gt;     &lt;span class=&quot;sy&quot;&gt;:allow_destroy&lt;/span&gt; =&amp;gt; &lt;span class=&quot;pc&quot;&gt;true&lt;/span&gt;,
&lt;span class=&quot;no&quot;&gt; 6&lt;/span&gt;     &lt;span class=&quot;sy&quot;&gt;:reject_if&lt;/span&gt; =&amp;gt; proc {|attrs| attrs[&lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;].blank? }
&lt;span class=&quot;no&quot;&gt; 7&lt;/span&gt; 
&lt;span class=&quot;no&quot;&gt; 8&lt;/span&gt;   validate &lt;span class=&quot;sy&quot;&gt;:must_have_one_chapter&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 9&lt;/span&gt; 
&lt;span class=&quot;no&quot;&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;/span&gt;   &lt;span class=&quot;r&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;must_have_one_chapter&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;11&lt;/span&gt;     errors.add(&lt;span class=&quot;sy&quot;&gt;:chapters&lt;/span&gt;, &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;must have one chapter&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) &lt;span class=&quot;r&quot;&gt;if&lt;/span&gt; chapters_empty?
&lt;span class=&quot;no&quot;&gt;12&lt;/span&gt;   &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;13&lt;/span&gt; 
&lt;span class=&quot;no&quot;&gt;14&lt;/span&gt;   &lt;span class=&quot;r&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;chapters_empty?&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;15&lt;/span&gt;     chapters.empty? &lt;span class=&quot;r&quot;&gt;or&lt;/span&gt; chapters.all? {|chapter| chapter.marked_for_destruction? }
&lt;span class=&quot;no&quot;&gt;16&lt;/span&gt;   &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;17&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Now the validation will fail as expected; you might check the associated models for destruction seperately to generate a more appropriate message.&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>Released: MongoDoc 0.2.1</title>
    <link rel="alternate" type="text/html" href="http://blog.leshill.org/blog/2010/01/18/released-mongodoc-0-dot-2-dot-1.html" />
    
    <id>tag:blog.leshill.org,2010-01-18:1263876532</id>
    
    <published>2010-01-18T23:48:52-05:00</published>
    <updated>2010-01-18T23:48:52-05:00</updated>
    <content type="html">&lt;p&gt;I just released &lt;a href=&quot;http://github.com/leshill/mongodoc&quot;&gt;MongoDoc&lt;/a&gt; v0.2.1, with mongodb 1.3 and partial update support.&lt;/p&gt;
&lt;h2&gt;What is it?&lt;/h2&gt;
&lt;p&gt;MongoDoc is a simple and easy to use ActiveRecord-like object mapper for &lt;a href=&quot;http://www.mongodb.org&quot;&gt;mongoDB&lt;/a&gt; in Ruby.&lt;/p&gt;
&lt;p&gt;MongoDoc is &lt;em&gt;also&lt;/em&gt; an extension of the &lt;a href=&quot;http://github.com/mongodb/mongo-ruby-driver&quot;&gt;Mongo Ruby Driver&lt;/a&gt; making it a snap to get Ruby in and out of mongoDB.&lt;/p&gt;
&lt;p&gt;MongoDoc is &lt;strong&gt;not&lt;/strong&gt; ActiveRecord for mongoDB.  We do not have callbacks, nor do we have dynamic finders.  We do have associations, named scopes, and other features.&lt;/p&gt;
&lt;p&gt;MongoDoc &lt;strong&gt;is&lt;/strong&gt; simple, easy-to-use, and fast. And it works with Rails (2.3.x at the moment, 3 soonish?).&lt;/p&gt;
&lt;p&gt;MongoDoc is designed to work with document data, if you are looking to map relational data in mongoDB, you will have to look elsewhere.&lt;/p&gt;
&lt;h2&gt;Ruby objects in mongoDB&lt;/h2&gt;
&lt;p&gt;Lets just get right into it and save some Ruby objects in mongoDB!&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;cl&quot;&gt;Contact&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;2&lt;/span&gt;   attr_accessor &lt;span class=&quot;sy&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;sy&quot;&gt;:addresses&lt;/span&gt;, &lt;span class=&quot;sy&quot;&gt;:interests&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;4&lt;/span&gt; 
&lt;span class=&quot;no&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;cl&quot;&gt;Address&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;6&lt;/span&gt;   attr_accessor &lt;span class=&quot;sy&quot;&gt;:street&lt;/span&gt;, &lt;span class=&quot;sy&quot;&gt;:city&lt;/span&gt;, &lt;span class=&quot;sy&quot;&gt;:state&lt;/span&gt;, &lt;span class=&quot;sy&quot;&gt;:zip&lt;/span&gt;, &lt;span class=&quot;sy&quot;&gt;:phone_number&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;With MongoDoc, instead of saving JSON&lt;sup class=&quot;footnote&quot; id=&quot;fnr1&quot;&gt;&lt;a href=&quot;#fn1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, we can save an object directly:&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt; 1&lt;/span&gt; contact = &lt;span class=&quot;co&quot;&gt;Contact&lt;/span&gt;.new
&lt;span class=&quot;no&quot;&gt; 2&lt;/span&gt; contact.name = &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Hashrocket&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 3&lt;/span&gt; contact.interests = [&lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ruby&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;rails&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;agile&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]
&lt;span class=&quot;no&quot;&gt; 4&lt;/span&gt; 
&lt;span class=&quot;no&quot;&gt; 5&lt;/span&gt; address = &lt;span class=&quot;co&quot;&gt;Address&lt;/span&gt;.new
&lt;span class=&quot;no&quot;&gt; 6&lt;/span&gt; address.street = &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;320 First Street North, #712&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 7&lt;/span&gt; address.city = &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Jacksonville Beach&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 8&lt;/span&gt; address.state = &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;FL&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 9&lt;/span&gt; address.zip = &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;32250&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;/span&gt; address.phone_number = &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;877 885 8846&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;11&lt;/span&gt; contact.addresses = [address]
&lt;span class=&quot;no&quot;&gt;12&lt;/span&gt; 
&lt;span class=&quot;no&quot;&gt;13&lt;/span&gt; collection.save(contact)&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;We can query using the powerful mongoDB query syntax, and have it return Ruby objects:&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt;1&lt;/span&gt; results = collection.find(&lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;addresses.state&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;FL&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;no&quot;&gt;2&lt;/span&gt; hashrocket = results.to_a.find {|contact| contact.name == &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Hashrocket&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;}
&lt;span class=&quot;no&quot;&gt;3&lt;/span&gt; puts hashrocket.addresses.first.phone_number&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Take a look in the examples directory for more code.&lt;/p&gt;
&lt;h2&gt;Mapping Documents&lt;/h2&gt;
&lt;p&gt;MongoDoc provides ActiveRecord-like persistence, associations, named scopes, and validations (from &lt;a href=&quot;http://github.com/durran/validatable&quot;&gt;Validatable&lt;/a&gt;) as well as a mongoDB query language (from &lt;a href=&quot;http://mongoid.org/home&quot;&gt;Mongoid&lt;/a&gt;). MongoDoc also plays nicely with Rails.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MongoDoc::Document&lt;/code&gt; provides all these features as a mixin.  A &lt;code&gt;MongoDoc::Document&lt;/code&gt; can either be a top-level mongoDB document, or an embedded document contained within a top-level document. Top-level documents are stored in collections named after their class: &lt;code&gt;Contact&lt;/code&gt; objects are stored in the &amp;#8216;contacts&amp;#8217; collection (much like ActiveRecord).&lt;/p&gt;
&lt;p&gt;Lets define a &lt;code&gt;Contact&lt;/code&gt; document with an &lt;code&gt;Address&lt;/code&gt; embedded document:&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;cl&quot;&gt;Address&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 2&lt;/span&gt;   include &lt;span class=&quot;co&quot;&gt;MongoDoc&lt;/span&gt;::&lt;span class=&quot;co&quot;&gt;Document&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 3&lt;/span&gt; 
&lt;span class=&quot;no&quot;&gt; 4&lt;/span&gt;   key &lt;span class=&quot;sy&quot;&gt;:street&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 5&lt;/span&gt;   key &lt;span class=&quot;sy&quot;&gt;:city&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 6&lt;/span&gt;   key &lt;span class=&quot;sy&quot;&gt;:state&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 7&lt;/span&gt;   key &lt;span class=&quot;sy&quot;&gt;:zip_code&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 8&lt;/span&gt;   key &lt;span class=&quot;sy&quot;&gt;:phone_number&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 9&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;/span&gt; 
&lt;span class=&quot;no&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;cl&quot;&gt;Contact&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;12&lt;/span&gt;   include &lt;span class=&quot;co&quot;&gt;MongoDoc&lt;/span&gt;::&lt;span class=&quot;co&quot;&gt;Document&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;13&lt;/span&gt; 
&lt;span class=&quot;no&quot;&gt;14&lt;/span&gt;   key &lt;span class=&quot;sy&quot;&gt;:name&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;15&lt;/span&gt;   key &lt;span class=&quot;sy&quot;&gt;:interests&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;16&lt;/span&gt;   has_many &lt;span class=&quot;sy&quot;&gt;:addresses&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;17&lt;/span&gt; 
&lt;span class=&quot;no&quot;&gt;18&lt;/span&gt;   named_scope &lt;span class=&quot;sy&quot;&gt;:in_state&lt;/span&gt;, lambda {|state| {&lt;span class=&quot;sy&quot;&gt;:where&lt;/span&gt; =&amp;gt; {&lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;addresses.state&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt; =&amp;gt; state}}}
&lt;span class=&quot;no&quot;&gt;19&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Since a mongoDB document has no fixed schema, we define the composition of a document directly in our classes. Please note we do not specify types! We can also specify &lt;code&gt;has_one&lt;/code&gt; or &lt;code&gt;has_many&lt;/code&gt; associations.&lt;/p&gt;
&lt;p&gt;Building and saving a document is easy:&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt;1&lt;/span&gt; contact = &lt;span class=&quot;co&quot;&gt;Contact&lt;/span&gt;.new(&lt;span class=&quot;sy&quot;&gt;:name&lt;/span&gt; =&amp;gt; &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Hashrocket&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;sy&quot;&gt;:interests&lt;/span&gt; =&amp;gt; [&lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ruby&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;rails&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;agile&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;])
&lt;span class=&quot;no&quot;&gt;2&lt;/span&gt; contact.addresses &amp;lt;&amp;lt; &lt;span class=&quot;co&quot;&gt;Address&lt;/span&gt;.new(&lt;span class=&quot;sy&quot;&gt;:street&lt;/span&gt; =&amp;gt; &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;320 1st Street North, #712&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
&lt;span class=&quot;no&quot;&gt;3&lt;/span&gt;   &lt;span class=&quot;sy&quot;&gt;:city&lt;/span&gt; =&amp;gt; &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Jacksonville Beach&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
&lt;span class=&quot;no&quot;&gt;4&lt;/span&gt;   &lt;span class=&quot;sy&quot;&gt;:state&lt;/span&gt; =&amp;gt; &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;FL&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
&lt;span class=&quot;no&quot;&gt;5&lt;/span&gt;   &lt;span class=&quot;sy&quot;&gt;:zip_code&lt;/span&gt; =&amp;gt; &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;32250&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
&lt;span class=&quot;no&quot;&gt;6&lt;/span&gt;   &lt;span class=&quot;sy&quot;&gt;:phone_number&lt;/span&gt; =&amp;gt; &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;877 885 8846&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;no&quot;&gt;7&lt;/span&gt; contact.save&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Now that we have some data, we can query using our named scope:&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt;1&lt;/span&gt; hashrocket = &lt;span class=&quot;co&quot;&gt;Contact&lt;/span&gt;.in_state(&lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;FL&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;).find {|contact| contact.name == &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Hashrocket&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;}&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;And we can even perform partial updates:&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt;1&lt;/span&gt; hashrocket.addresses.first.update_attributes(&lt;span class=&quot;sy&quot;&gt;:street&lt;/span&gt; =&amp;gt; &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;320 First Street North, #712&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;MongoDoc &lt;strong&gt;requires&lt;/strong&gt; mongoDB v1.3 or later.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo gem install mongodoc&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Configuration&lt;/h2&gt;
&lt;p&gt;Configure your database connection in ./mongodb.yml, you do not need one if you are running on localhost with the default port&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;name: test
host: localhost
port: 27017
options:
  auto_reconnect: true&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can change the location of the configuration file:&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;MongoDoc&lt;/span&gt;.config_path = &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;./config/mongodb.yml&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p class=&quot;footnote&quot; id=&quot;fn1&quot;&gt;&lt;a href=&quot;#fnr1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; The Ruby driver exposes an API that understands JSON.&lt;/p&gt;</content>
  </entry>
  
</feed>
