<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title>Les Hill</title>
  <link href="http://feeds2.feedburner.com/leshill" type="application/atom+xml" rel="self" />
  <link href="http://blog.leshill.org/" type="text/html" rel="alternate" />
  <updated>2010-06-13T18:34:07-04:00</updated>
  <author>
    <name>Les Hill</name>
    <email>blog@leshill.org</email>
  </author>
  <id>http://blog.leshill.org/</id>
  
  <entry>
    <title>resque_spec for RSpec and Cucumber</title>
    <link rel="alternate" type="text/html" href="http://blog.leshill.org/blog/2010/06/13/resque-spec-for-rspec-and-cucumber.html" />
    
    <id>tag:blog.leshill.org,2010-06-13:1276467017</id>
    
    <published>2010-06-13T18:10:17-04:00</published>
    <updated>2010-06-13T18:10:17-04:00</updated>
    <content type="html">&lt;p&gt;&lt;code&gt;resque_spec&lt;/code&gt; is a simple RSpec and Cucumber matcher for &lt;a href=&quot;http://github.com/defunkt/resque&quot;&gt;Resque&lt;/a&gt; , loosely based on &lt;a href=&quot;http://github.com/justinweiss/resque_unit&quot;&gt;resque_unit&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;Install it as a gem:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;% gem install resque_spec&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Given this scenario&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt;1&lt;/span&gt; Given a person
&lt;span class=&quot;no&quot;&gt;2&lt;/span&gt; When I recalculate
&lt;span class=&quot;no&quot;&gt;3&lt;/span&gt; Then the person has calculate queued&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;And I write this spec using the &lt;code&gt;resque_spec&lt;/code&gt; matcher&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt; 1&lt;/span&gt; describe &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;#recalculate&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 2&lt;/span&gt;   before &lt;span class=&quot;r&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 3&lt;/span&gt;     &lt;span class=&quot;co&quot;&gt;ResqueSpec&lt;/span&gt;.reset!
&lt;span class=&quot;no&quot;&gt; 4&lt;/span&gt;   &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 5&lt;/span&gt; 
&lt;span class=&quot;no&quot;&gt; 6&lt;/span&gt;   it &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;adds person.calculate to the Person queue&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 7&lt;/span&gt;     person.recalculate
&lt;span class=&quot;no&quot;&gt; 8&lt;/span&gt;     &lt;span class=&quot;co&quot;&gt;Person&lt;/span&gt;.should have_queued(person.id, &lt;span class=&quot;sy&quot;&gt;:calculate&lt;/span&gt;)
&lt;span class=&quot;no&quot;&gt; 9&lt;/span&gt;   &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;(And I take note of the &lt;code&gt;before&lt;/code&gt; block that is calling &lt;code&gt;reset!&lt;/code&gt; for every spec)&lt;/p&gt;
&lt;p&gt;And I might write this as a Cucumber step&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;Then&lt;/span&gt; &lt;span class=&quot;rx&quot;&gt;&lt;span class=&quot;dl&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;the (&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\w&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;?) has (&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\w&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;?) queued&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;/&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;do&lt;/span&gt; |thing, method|
&lt;span class=&quot;no&quot;&gt;2&lt;/span&gt;   thing_obj = instance_variable_get(&lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;il&quot;&gt;&lt;span class=&quot;idl&quot;&gt;#{&lt;/span&gt;thing&lt;span class=&quot;idl&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;no&quot;&gt;3&lt;/span&gt;   thing_obj.class.should have_queued(thing_obj.id, method.to_sym)
&lt;span class=&quot;no&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Then I write some code to make it pass:&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;cl&quot;&gt;Person&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;iv&quot;&gt;@queue&lt;/span&gt; = &lt;span class=&quot;sy&quot;&gt;:people&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;3&lt;/span&gt; 
&lt;span class=&quot;no&quot;&gt;4&lt;/span&gt;   &lt;span class=&quot;r&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;recalculate&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;5&lt;/span&gt;     &lt;span class=&quot;co&quot;&gt;Resque&lt;/span&gt;.enqueue(&lt;span class=&quot;co&quot;&gt;Person&lt;/span&gt;, id, &lt;span class=&quot;sy&quot;&gt;:calculate&lt;/span&gt;)
&lt;span class=&quot;no&quot;&gt;6&lt;/span&gt;   &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The source is up on &lt;a href=&quot;http://github.com/leshill/resque_spec&quot;&gt;github&lt;/a&gt; .&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>Rails 3, RSpec, Factory Girl, Haml, and jQuery</title>
    <link rel="alternate" type="text/html" href="http://blog.leshill.org/blog/2010/05/08/rails-3-rspec-factory-girl-haml-and-jquery.html" />
    
    <id>tag:blog.leshill.org,2010-05-08:1273377370</id>
    
    <published>2010-05-08T23:56:10-04:00</published>
    <updated>2010-05-08T23:56:10-04:00</updated>
    <content type="html">&lt;p&gt;Easily generate a Rails 3 application with RSpec, Factory Girl, Haml, and jQuery in one line:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;% rails my_app -J -T -m \
    http://github.com/leshill/rails3-app/raw/master/app.rb&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;rvm&lt;/h2&gt;
&lt;p&gt;We love &lt;code&gt;rvm&lt;/code&gt;, so the application has an &lt;code&gt;.rvmrc&lt;/code&gt; generated to specify a gemset.&lt;/p&gt;
&lt;h2&gt;Generators&lt;/h2&gt;
&lt;p&gt;This also gives you the Factory Girl and Haml Rails 3 generators &amp;mdash; the generators for RSpec are in the RSpec gem &amp;mdash; so that your factories and views are generated using Factory Girl and Haml, and that all your generated tests are specs. These generators are from the &lt;strong&gt;rails3_generators&lt;/strong&gt; gem, we pulled them out to avoid all the other dependencies included in that gem.&lt;/p&gt;
&lt;h2&gt;JavaScript Includes&lt;/h2&gt;
&lt;p&gt;Since the Rails helper &lt;code&gt;javascript_include_tag :defaults&lt;/code&gt; is looking for Prototype, we used &lt;a href=&quot;http://flow.handle.it/past/2010/2/9/jquery_in_rails&quot;&gt;this&lt;/a&gt; to add a new JavaScript expansion to pull in the jQuery libraries. Use it like so:&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt;1&lt;/span&gt; = javascript_include_tag &lt;span class=&quot;sy&quot;&gt;:jquery&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h2&gt;git&lt;/h2&gt;
&lt;p&gt;We love &lt;code&gt;git&lt;/code&gt;, so the application has a git repo initialized with all the initial changes staged.&lt;/p&gt;
&lt;h2&gt;Wrap Up&lt;/h2&gt;
&lt;p&gt;After the application has been generated, there are a few clean up commands to run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  % cd my_app
  % gem install bundler
  % bundle install
  % bundle lock
  % script/rails generate rspec:install&lt;/code&gt;&lt;/pre&gt;</content>
  </entry>
  
  <entry>
    <title>Binary Search, TDD, and You</title>
    <link rel="alternate" type="text/html" href="http://blog.leshill.org/blog/2010/04/26/binary-search-tdd-and-you.html" />
    
    <id>tag:blog.leshill.org,2010-04-26:1272337358</id>
    
    <published>2010-04-26T23:02:38-04:00</published>
    <updated>2010-04-26T23:02:38-04:00</updated>
    <content type="html">&lt;p&gt;A bit late to the party, I took a programming challenge from &lt;a href=&quot;http://reprog.wordpress.com/2010/04/19/are-you-one-of-the-10-percent/&quot;&gt;Mike Taylor&lt;/a&gt; :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Are you one of the 10% of programmers who can write a binary search?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The &lt;strong&gt;10%&lt;/strong&gt; is a reference to an essay by Jon Bentley, who found that only&lt;br /&gt;
&lt;strong&gt;10%&lt;/strong&gt; of the programmers asked could write a binary search correctly given a&lt;br /&gt;
description of the algorithm. The challenge from Mike was to write it without&lt;br /&gt;
any &lt;strong&gt;TESTING&lt;/strong&gt; whatsoever.&lt;/p&gt;
&lt;p&gt;Here is my answer in Ruby:&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;binary_search&lt;/span&gt;(value, array, start, finish = array.length - &lt;span class=&quot;i&quot;&gt;1&lt;/span&gt;)
&lt;span class=&quot;no&quot;&gt; 2&lt;/span&gt;   &lt;span class=&quot;r&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;-1&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;if&lt;/span&gt; finish &amp;lt; start
&lt;span class=&quot;no&quot;&gt; 3&lt;/span&gt;   mid = (start + finish)/&lt;span class=&quot;i&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 4&lt;/span&gt;   &lt;span class=&quot;r&quot;&gt;if&lt;/span&gt; array[mid] == value
&lt;span class=&quot;no&quot;&gt; 5&lt;/span&gt;     mid
&lt;span class=&quot;no&quot;&gt; 6&lt;/span&gt;   &lt;span class=&quot;r&quot;&gt;elsif&lt;/span&gt; array[mid] &amp;lt; value
&lt;span class=&quot;no&quot;&gt; 7&lt;/span&gt;     binary_search(value, array, mid + &lt;span class=&quot;i&quot;&gt;1&lt;/span&gt;, finish)
&lt;span class=&quot;no&quot;&gt; 8&lt;/span&gt;   &lt;span class=&quot;r&quot;&gt;else&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 9&lt;/span&gt;     binary_search(value, array, start, mid - &lt;span class=&quot;i&quot;&gt;1&lt;/span&gt;)
&lt;span class=&quot;no&quot;&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;/span&gt;   &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Pretty standard. This was about 1/2 an hour from start to finish; mostly due to&lt;br /&gt;
not being able to run the code&lt;sup class=&quot;footnote&quot; id=&quot;fnr1&quot;&gt;&lt;a href=&quot;#fn1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; and obsessing over whether I had handled all&lt;br /&gt;
the edge cases, which is related to my motivation for taking the challenge.&lt;/p&gt;
&lt;p&gt;Aside from being a fun exercise, the comments Mike received led him to write&lt;br /&gt;
two more blog posts!&lt;/p&gt;
&lt;p&gt;The third in the series, &lt;a href=&quot;http://reprog.wordpress.com/2010/04/23/testing-is-not-a-substitute-for-thinking-binary-search-part-3/&quot; title=&quot;binary&lt;br /&gt;
search part&lt;br /&gt;
3&quot;&gt;Testing is not a substitute for thinking&lt;/a&gt;&lt;br /&gt;
has some interesting and keen observations. I agree with most of them.&lt;/p&gt;
&lt;p&gt;However, the conclusion is absolutely, categorically wrong.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Bearing in mind that binary search is in fact a pretty&lt;br /&gt;
simple algorithm, it’s likely true that you could have&lt;br /&gt;
bashed your way through to a working implementation after&lt;br /&gt;
a few iterations of coding and testing.  But –&lt;/p&gt;
&lt;p&gt;Your code would be less clear&lt;/p&gt;
&lt;p&gt;You wouldn’t understand clearly why it works&lt;/p&gt;
&lt;p&gt;You would find it harder to extend or modify in future&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Inflammatory stuff. And totally &lt;strong&gt;wrong&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;A few paragraphs earlier, Mike lays out why he thinks this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;By using skills that are not often thought about&lt;br /&gt;
in these days of test-driven kool-ade, reflexive&lt;br /&gt;
application of design patterns and automatic refactoring&lt;br /&gt;
tools.  Once more, let me be clear that all these things&lt;br /&gt;
are good so far as they go — really, I agree with you,&lt;br /&gt;
they are! — but they are no substitute for actually&lt;br /&gt;
thinking, and thinking is what’s needed for hard problems.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Indeed thinking is what is needed for hard problems. What Mike has failed to&lt;br /&gt;
acknowledge is that TDD is not a tool for writing code, TDD is a tool for&lt;br /&gt;
thinking clearly.&lt;/p&gt;
&lt;p&gt;As an example of this, in the spirit of Mike&amp;#8217;s challenge, I expressly wrote the&lt;br /&gt;
binary search code without test-driving it. However, instead of writing the&lt;br /&gt;
code directly from the description, I turned the description into a set of&lt;br /&gt;
constraints. As each of those constraints became clear, I wrote code. And in&lt;br /&gt;
the end I had a working binary search&lt;sup class=&quot;footnote&quot; id=&quot;fnr2&quot;&gt;&lt;a href=&quot;#fn2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;So, am I saying Mike is an idiot? Absolutely not! After hearing more and more&lt;br /&gt;
critiques (both thoughtful and thoughtless) of TDD, I am coming around to the&lt;br /&gt;
conclusion that there is a problem. The problem is most people learn TDD&lt;br /&gt;
from a book or a blog or even from a vague description and some positive can-do&lt;br /&gt;
attitude (Commendable!  Really!)&lt;/p&gt;
&lt;p&gt;What has become apparent is that this will not work for most developers. What&lt;br /&gt;
does work is deliberate study and mentoring, ideally by pairing.  A mentor who&lt;br /&gt;
is showing you more than just the syntactic mechanics of writing test code and&lt;br /&gt;
having it invoke the code under test. Someone who is explaining how tests are a&lt;br /&gt;
tool for understanding and solving the problem.&lt;/p&gt;
&lt;p&gt;Folks interested in Software Craftsmanship have realized this truth about all&lt;br /&gt;
aspects of software development: you learn better from a mentor and from&lt;br /&gt;
deliberate practice.&lt;/p&gt;
&lt;p&gt;TDD is no exception.&lt;/p&gt;
&lt;p class=&quot;footnote&quot; id=&quot;fn1&quot;&gt;&lt;a href=&quot;#fnr1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; Sort-of, according to Mike&amp;#8217;s rules I could have shaken out syntax errors&lt;br /&gt;
by running the code; in the case of Ruby, that felt like cheating, so I just&lt;br /&gt;
stared at it.&lt;/p&gt;
&lt;p class=&quot;footnote&quot; id=&quot;fn2&quot;&gt;&lt;a href=&quot;#fnr2&quot;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; After the fact, I threw in a test scaffold to verify that it does work,&lt;br /&gt;
and that it is log(2)N.&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>Dynamic Load Paths in OSX</title>
    <link rel="alternate" type="text/html" href="http://blog.leshill.org/blog/2010/04/24/dynamic-load-paths-in-osx.html" />
    
    <id>tag:blog.leshill.org,2010-04-24:1272165152</id>
    
    <published>2010-04-24T23:12:32-04:00</published>
    <updated>2010-04-24T23:12:32-04:00</updated>
    <content type="html">&lt;p&gt;This came up recently in the context of &lt;strong&gt;OSX&lt;/strong&gt; 10.5, &lt;code&gt;rvm&lt;/code&gt;, &lt;code&gt;nokogiri&lt;/code&gt;, and &lt;code&gt;libxml2&lt;/code&gt;. The issue is that the shipped &lt;code&gt;libxml2&lt;/code&gt; for Leopard is old, and when using &lt;code&gt;rvm&lt;/code&gt; with a compiled &lt;code&gt;ruby&lt;/code&gt; which uses the system installed &lt;code&gt;libxml2&lt;/code&gt;, &lt;code&gt;nokogiri&lt;/code&gt; will give this friendly message:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;HI.  You&amp;#8217;re using libxml2 version 2.6.16 which is over 4&lt;br /&gt;
years old and has plenty of bugs.  We suggest that for maximum&lt;br /&gt;
HTML/XML parsing pleasure, you upgrade your version of&lt;br /&gt;
libxml2 and re-install nokogiri.  If you like using libxml2&lt;br /&gt;
version 2.6.16, but don&amp;#8217;t like this warning, please&lt;br /&gt;
define the constant&lt;br /&gt;
I_KNOW_I_AM_USING_AN_OLD_AND_BUGGY_VERSION_OF_LIBXML2&lt;br /&gt;
before requring nokogiri.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This becomes a problem when you have explicitly added a newer version of &lt;code&gt;libxml2&lt;/code&gt;, for example with &lt;a href=&quot;http://mxcl.github.com/homebrew/&quot;&gt;Homebrew&lt;/a&gt; , and &lt;code&gt;ruby&lt;/code&gt; is not finding it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;OSX&lt;/strong&gt; handles its shared library load paths this way&lt;sup class=&quot;footnote&quot; id=&quot;fnr1&quot;&gt;&lt;a href=&quot;#fn1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Find the requested library using &lt;strong&gt;DYLD_LIBRARY_PATH&lt;/strong&gt;&lt;sup class=&quot;footnote&quot; id=&quot;fnr2&quot;&gt;&lt;a href=&quot;#fn2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
	&lt;li&gt;Find the requested library where the binary thinks it should be&lt;/li&gt;
	&lt;li&gt;Find the requested library using &lt;strong&gt;DYLD_FALLBACK_LIBRARY_PATH&lt;/strong&gt;&lt;sup class=&quot;footnote&quot; id=&quot;fnr3&quot;&gt;&lt;a href=&quot;#fn3&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To make &lt;code&gt;ruby&lt;/code&gt; find your &lt;code&gt;libxml2&lt;/code&gt;, set the &lt;strong&gt;DYLD_LIBRARY_PATH&lt;/strong&gt; environment variable to include the path to where it is installed, for example &lt;code&gt;/usr/local/lib&lt;/code&gt;. In my case, I set it like so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;% export DYLD_LIBRARY_PATH=/usr/local/lib&lt;/code&gt;&lt;/pre&gt;
&lt;p class=&quot;footnote&quot; id=&quot;fn1&quot;&gt;&lt;a href=&quot;#fnr1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; This is a first order approximation, there are plenty of missing nuances here.&lt;/p&gt;
&lt;p class=&quot;footnote&quot; id=&quot;fn2&quot;&gt;&lt;a href=&quot;#fnr2&quot;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; This is a colon seperated path variable.&lt;/p&gt;
&lt;p class=&quot;footnote&quot; id=&quot;fn3&quot;&gt;&lt;a href=&quot;#fnr3&quot;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; Also a colon separated path variable; the default is &lt;code&gt;$(HOME)/lib:/usr/local/lib:/lib:/usr/lib&lt;/code&gt;&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>Validating Presence with Nested Models</title>
    <link rel="alternate" type="text/html" href="http://blog.leshill.org/blog/2010/04/20/validating-presence-with-nested-models.html" />
    
    <id>tag:blog.leshill.org,2010-04-20:1271796403</id>
    
    <published>2010-04-20T16:46:43-04:00</published>
    <updated>2010-04-20T16:46:43-04:00</updated>
    <content type="html">&lt;p&gt;A nifty little problem with a simple, lightly-documented solution came up recently while I was working on a &lt;em&gt;super-duper-top-secret-and-totally-awesome&lt;/em&gt; app for a client.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;accepts_nested_attributes_for&lt;/code&gt; has been a boon in Rails 2.3 and a great replacement for the venerable &lt;code&gt;attribute_fu&lt;/code&gt;. Under normal circumstances, you would use it like this to allow you to save an associated model thorough the parent model:&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;cl&quot;&gt;Book&lt;/span&gt; &amp;lt; &lt;span class=&quot;co&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;co&quot;&gt;Base&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;2&lt;/span&gt;   has_many &lt;span class=&quot;sy&quot;&gt;:chapters&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;3&lt;/span&gt; 
&lt;span class=&quot;no&quot;&gt;4&lt;/span&gt;   accepts_nested_attributes_for &lt;span class=&quot;sy&quot;&gt;:chapters&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;In your forms, you can use &lt;code&gt;fields_for&lt;/code&gt; to specify associated &lt;code&gt;Chapter&lt;/code&gt; models. With a little &lt;strong&gt;JavaScript-fu&lt;/strong&gt;, you can craft a form to create a &lt;code&gt;Book&lt;/code&gt; with multiple &lt;code&gt;Chapters&lt;/code&gt; all at once, without a lot of controller code. With a little more &lt;strong&gt;JavaScript&lt;/strong&gt; and an option to &lt;code&gt;accepts_nested_attributes_for&lt;/code&gt; you can enable deletions:&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;cl&quot;&gt;Book&lt;/span&gt; &amp;lt; &lt;span class=&quot;co&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;co&quot;&gt;Base&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;2&lt;/span&gt;   has_many &lt;span class=&quot;sy&quot;&gt;:chapters&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;3&lt;/span&gt; 
&lt;span class=&quot;no&quot;&gt;4&lt;/span&gt;   accepts_nested_attributes_for &lt;span class=&quot;sy&quot;&gt;:chapters&lt;/span&gt;,
&lt;span class=&quot;no&quot;&gt;5&lt;/span&gt;     &lt;span class=&quot;sy&quot;&gt;:allow_destroy&lt;/span&gt; =&amp;gt; &lt;span class=&quot;pc&quot;&gt;true&lt;/span&gt;,
&lt;span class=&quot;no&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;At this point, you may want to detect and reject empty associated models like this:&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;cl&quot;&gt;Book&lt;/span&gt; &amp;lt; &lt;span class=&quot;co&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;co&quot;&gt;Base&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;2&lt;/span&gt;   has_many &lt;span class=&quot;sy&quot;&gt;:chapters&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;3&lt;/span&gt; 
&lt;span class=&quot;no&quot;&gt;4&lt;/span&gt;   accepts_nested_attributes_for &lt;span class=&quot;sy&quot;&gt;:chapters&lt;/span&gt;,
&lt;span class=&quot;no&quot;&gt;5&lt;/span&gt;     &lt;span class=&quot;sy&quot;&gt;:allow_destroy&lt;/span&gt; =&amp;gt; &lt;span class=&quot;pc&quot;&gt;true&lt;/span&gt;,
&lt;span class=&quot;no&quot;&gt;6&lt;/span&gt;     &lt;span class=&quot;sy&quot;&gt;:reject_if&lt;/span&gt; =&amp;gt; proc {|attrs| attrs[&lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;].blank? }
&lt;span class=&quot;no&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The wrinkle comes in if you also want to validate that you always have at least &lt;strong&gt;one&lt;/strong&gt; associated model. You might think of doing the following, which is close, but does not work in all situations:&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;cl&quot;&gt;Book&lt;/span&gt; &amp;lt; &lt;span class=&quot;co&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;co&quot;&gt;Base&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 2&lt;/span&gt;   has_many &lt;span class=&quot;sy&quot;&gt;:chapters&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 3&lt;/span&gt; 
&lt;span class=&quot;no&quot;&gt; 4&lt;/span&gt;   accepts_nested_attributes_for &lt;span class=&quot;sy&quot;&gt;:chapters&lt;/span&gt;,
&lt;span class=&quot;no&quot;&gt; 5&lt;/span&gt;     &lt;span class=&quot;sy&quot;&gt;:allow_destroy&lt;/span&gt; =&amp;gt; &lt;span class=&quot;pc&quot;&gt;true&lt;/span&gt;,
&lt;span class=&quot;no&quot;&gt; 6&lt;/span&gt;     &lt;span class=&quot;sy&quot;&gt;:reject_if&lt;/span&gt; =&amp;gt; proc {|attrs| attrs[&lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;].blank? }
&lt;span class=&quot;no&quot;&gt; 7&lt;/span&gt; 
&lt;span class=&quot;no&quot;&gt; 8&lt;/span&gt;   validate &lt;span class=&quot;sy&quot;&gt;:must_have_one_chapter&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 9&lt;/span&gt; 
&lt;span class=&quot;no&quot;&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;/span&gt;   &lt;span class=&quot;r&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;must_have_one_chapter&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;11&lt;/span&gt;     errors.add(&lt;span class=&quot;sy&quot;&gt;:chapters&lt;/span&gt;, &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;must have one chapter&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) &lt;span class=&quot;r&quot;&gt;if&lt;/span&gt; chapters_empty?
&lt;span class=&quot;no&quot;&gt;12&lt;/span&gt;   &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;13&lt;/span&gt; 
&lt;span class=&quot;no&quot;&gt;14&lt;/span&gt;   &lt;span class=&quot;r&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;chapters_empty?&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;15&lt;/span&gt;     chapters.empty?
&lt;span class=&quot;no&quot;&gt;16&lt;/span&gt;   &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;17&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;This works except when you are destroying an associated model; the &lt;code&gt;destroy&lt;/code&gt; occurs &lt;strong&gt;after&lt;/strong&gt; the validations have been run, making &lt;code&gt;chapters_empty?&lt;/code&gt; true. The fix is to check the associated models to see if they are &lt;code&gt;marked_for_destruction&lt;/code&gt; during the &lt;code&gt;save&lt;/code&gt;, like so:&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;cl&quot;&gt;Book&lt;/span&gt; &amp;lt; &lt;span class=&quot;co&quot;&gt;ActiveRecord&lt;/span&gt;::&lt;span class=&quot;co&quot;&gt;Base&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 2&lt;/span&gt;   has_many &lt;span class=&quot;sy&quot;&gt;:chapters&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 3&lt;/span&gt; 
&lt;span class=&quot;no&quot;&gt; 4&lt;/span&gt;   accepts_nested_attributes_for &lt;span class=&quot;sy&quot;&gt;:chapters&lt;/span&gt;,
&lt;span class=&quot;no&quot;&gt; 5&lt;/span&gt;     &lt;span class=&quot;sy&quot;&gt;:allow_destroy&lt;/span&gt; =&amp;gt; &lt;span class=&quot;pc&quot;&gt;true&lt;/span&gt;,
&lt;span class=&quot;no&quot;&gt; 6&lt;/span&gt;     &lt;span class=&quot;sy&quot;&gt;:reject_if&lt;/span&gt; =&amp;gt; proc {|attrs| attrs[&lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;].blank? }
&lt;span class=&quot;no&quot;&gt; 7&lt;/span&gt; 
&lt;span class=&quot;no&quot;&gt; 8&lt;/span&gt;   validate &lt;span class=&quot;sy&quot;&gt;:must_have_one_chapter&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 9&lt;/span&gt; 
&lt;span class=&quot;no&quot;&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;/span&gt;   &lt;span class=&quot;r&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;must_have_one_chapter&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;11&lt;/span&gt;     errors.add(&lt;span class=&quot;sy&quot;&gt;:chapters&lt;/span&gt;, &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;must have one chapter&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) &lt;span class=&quot;r&quot;&gt;if&lt;/span&gt; chapters_empty?
&lt;span class=&quot;no&quot;&gt;12&lt;/span&gt;   &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;13&lt;/span&gt; 
&lt;span class=&quot;no&quot;&gt;14&lt;/span&gt;   &lt;span class=&quot;r&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;chapters_empty?&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;15&lt;/span&gt;     chapters.empty? &lt;span class=&quot;r&quot;&gt;or&lt;/span&gt; chapters.all? {|chapter| chapter.marked_for_destruction? }
&lt;span class=&quot;no&quot;&gt;16&lt;/span&gt;   &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;17&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Now the validation will fail as expected; you might check the associated models for destruction seperately to generate a more appropriate message.&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>Released: MongoDoc 0.2.1</title>
    <link rel="alternate" type="text/html" href="http://blog.leshill.org/blog/2010/01/18/released-mongodoc-0-dot-2-dot-1.html" />
    
    <id>tag:blog.leshill.org,2010-01-18:1263876532</id>
    
    <published>2010-01-18T23:48:52-05:00</published>
    <updated>2010-01-18T23:48:52-05:00</updated>
    <content type="html">&lt;p&gt;I just released &lt;a href=&quot;http://github.com/leshill/mongodoc&quot;&gt;MongoDoc&lt;/a&gt; v0.2.1, with mongodb 1.3 and partial update support.&lt;/p&gt;
&lt;h2&gt;What is it?&lt;/h2&gt;
&lt;p&gt;MongoDoc is a simple and easy to use ActiveRecord-like object mapper for &lt;a href=&quot;http://www.mongodb.org&quot;&gt;mongoDB&lt;/a&gt; in Ruby.&lt;/p&gt;
&lt;p&gt;MongoDoc is &lt;em&gt;also&lt;/em&gt; an extension of the &lt;a href=&quot;http://github.com/mongodb/mongo-ruby-driver&quot;&gt;Mongo Ruby Driver&lt;/a&gt; making it a snap to get Ruby in and out of mongoDB.&lt;/p&gt;
&lt;p&gt;MongoDoc is &lt;strong&gt;not&lt;/strong&gt; ActiveRecord for mongoDB.  We do not have callbacks, nor do we have dynamic finders.  We do have associations, named scopes, and other features.&lt;/p&gt;
&lt;p&gt;MongoDoc &lt;strong&gt;is&lt;/strong&gt; simple, easy-to-use, and fast. And it works with Rails (2.3.x at the moment, 3 soonish?).&lt;/p&gt;
&lt;p&gt;MongoDoc is designed to work with document data, if you are looking to map relational data in mongoDB, you will have to look elsewhere.&lt;/p&gt;
&lt;h2&gt;Ruby objects in mongoDB&lt;/h2&gt;
&lt;p&gt;Lets just get right into it and save some Ruby objects in mongoDB!&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;cl&quot;&gt;Contact&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;2&lt;/span&gt;   attr_accessor &lt;span class=&quot;sy&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;sy&quot;&gt;:addresses&lt;/span&gt;, &lt;span class=&quot;sy&quot;&gt;:interests&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;4&lt;/span&gt; 
&lt;span class=&quot;no&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;cl&quot;&gt;Address&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;6&lt;/span&gt;   attr_accessor &lt;span class=&quot;sy&quot;&gt;:street&lt;/span&gt;, &lt;span class=&quot;sy&quot;&gt;:city&lt;/span&gt;, &lt;span class=&quot;sy&quot;&gt;:state&lt;/span&gt;, &lt;span class=&quot;sy&quot;&gt;:zip&lt;/span&gt;, &lt;span class=&quot;sy&quot;&gt;:phone_number&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;With MongoDoc, instead of saving JSON&lt;sup class=&quot;footnote&quot; id=&quot;fnr1&quot;&gt;&lt;a href=&quot;#fn1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, we can save an object directly:&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt; 1&lt;/span&gt; contact = &lt;span class=&quot;co&quot;&gt;Contact&lt;/span&gt;.new
&lt;span class=&quot;no&quot;&gt; 2&lt;/span&gt; contact.name = &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Hashrocket&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 3&lt;/span&gt; contact.interests = [&lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ruby&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;rails&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;agile&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]
&lt;span class=&quot;no&quot;&gt; 4&lt;/span&gt; 
&lt;span class=&quot;no&quot;&gt; 5&lt;/span&gt; address = &lt;span class=&quot;co&quot;&gt;Address&lt;/span&gt;.new
&lt;span class=&quot;no&quot;&gt; 6&lt;/span&gt; address.street = &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;320 First Street North, #712&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 7&lt;/span&gt; address.city = &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Jacksonville Beach&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 8&lt;/span&gt; address.state = &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;FL&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 9&lt;/span&gt; address.zip = &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;32250&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;/span&gt; address.phone_number = &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;877 885 8846&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;11&lt;/span&gt; contact.addresses = [address]
&lt;span class=&quot;no&quot;&gt;12&lt;/span&gt; 
&lt;span class=&quot;no&quot;&gt;13&lt;/span&gt; collection.save(contact)&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;We can query using the powerful mongoDB query syntax, and have it return Ruby objects:&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt;1&lt;/span&gt; results = collection.find(&lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;addresses.state&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;FL&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;no&quot;&gt;2&lt;/span&gt; hashrocket = results.to_a.find {|contact| contact.name == &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Hashrocket&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;}
&lt;span class=&quot;no&quot;&gt;3&lt;/span&gt; puts hashrocket.addresses.first.phone_number&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Take a look in the examples directory for more code.&lt;/p&gt;
&lt;h2&gt;Mapping Documents&lt;/h2&gt;
&lt;p&gt;MongoDoc provides ActiveRecord-like persistence, associations, named scopes, and validations (from &lt;a href=&quot;http://github.com/durran/validatable&quot;&gt;Validatable&lt;/a&gt;) as well as a mongoDB query language (from &lt;a href=&quot;http://mongoid.org/home&quot;&gt;Mongoid&lt;/a&gt;). MongoDoc also plays nicely with Rails.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MongoDoc::Document&lt;/code&gt; provides all these features as a mixin.  A &lt;code&gt;MongoDoc::Document&lt;/code&gt; can either be a top-level mongoDB document, or an embedded document contained within a top-level document. Top-level documents are stored in collections named after their class: &lt;code&gt;Contact&lt;/code&gt; objects are stored in the &amp;#8216;contacts&amp;#8217; collection (much like ActiveRecord).&lt;/p&gt;
&lt;p&gt;Lets define a &lt;code&gt;Contact&lt;/code&gt; document with an &lt;code&gt;Address&lt;/code&gt; embedded document:&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;cl&quot;&gt;Address&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 2&lt;/span&gt;   include &lt;span class=&quot;co&quot;&gt;MongoDoc&lt;/span&gt;::&lt;span class=&quot;co&quot;&gt;Document&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 3&lt;/span&gt; 
&lt;span class=&quot;no&quot;&gt; 4&lt;/span&gt;   key &lt;span class=&quot;sy&quot;&gt;:street&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 5&lt;/span&gt;   key &lt;span class=&quot;sy&quot;&gt;:city&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 6&lt;/span&gt;   key &lt;span class=&quot;sy&quot;&gt;:state&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 7&lt;/span&gt;   key &lt;span class=&quot;sy&quot;&gt;:zip_code&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 8&lt;/span&gt;   key &lt;span class=&quot;sy&quot;&gt;:phone_number&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 9&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;/span&gt; 
&lt;span class=&quot;no&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;cl&quot;&gt;Contact&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;12&lt;/span&gt;   include &lt;span class=&quot;co&quot;&gt;MongoDoc&lt;/span&gt;::&lt;span class=&quot;co&quot;&gt;Document&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;13&lt;/span&gt; 
&lt;span class=&quot;no&quot;&gt;14&lt;/span&gt;   key &lt;span class=&quot;sy&quot;&gt;:name&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;15&lt;/span&gt;   key &lt;span class=&quot;sy&quot;&gt;:interests&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;16&lt;/span&gt;   has_many &lt;span class=&quot;sy&quot;&gt;:addresses&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;17&lt;/span&gt; 
&lt;span class=&quot;no&quot;&gt;18&lt;/span&gt;   named_scope &lt;span class=&quot;sy&quot;&gt;:in_state&lt;/span&gt;, lambda {|state| {&lt;span class=&quot;sy&quot;&gt;:where&lt;/span&gt; =&amp;gt; {&lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;addresses.state&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt; =&amp;gt; state}}}
&lt;span class=&quot;no&quot;&gt;19&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Since a mongoDB document has no fixed schema, we define the composition of a document directly in our classes. Please note we do not specify types! We can also specify &lt;code&gt;has_one&lt;/code&gt; or &lt;code&gt;has_many&lt;/code&gt; associations.&lt;/p&gt;
&lt;p&gt;Building and saving a document is easy:&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt;1&lt;/span&gt; contact = &lt;span class=&quot;co&quot;&gt;Contact&lt;/span&gt;.new(&lt;span class=&quot;sy&quot;&gt;:name&lt;/span&gt; =&amp;gt; &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Hashrocket&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;sy&quot;&gt;:interests&lt;/span&gt; =&amp;gt; [&lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ruby&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;rails&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;agile&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;])
&lt;span class=&quot;no&quot;&gt;2&lt;/span&gt; contact.addresses &amp;lt;&amp;lt; &lt;span class=&quot;co&quot;&gt;Address&lt;/span&gt;.new(&lt;span class=&quot;sy&quot;&gt;:street&lt;/span&gt; =&amp;gt; &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;320 1st Street North, #712&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
&lt;span class=&quot;no&quot;&gt;3&lt;/span&gt;   &lt;span class=&quot;sy&quot;&gt;:city&lt;/span&gt; =&amp;gt; &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Jacksonville Beach&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
&lt;span class=&quot;no&quot;&gt;4&lt;/span&gt;   &lt;span class=&quot;sy&quot;&gt;:state&lt;/span&gt; =&amp;gt; &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;FL&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
&lt;span class=&quot;no&quot;&gt;5&lt;/span&gt;   &lt;span class=&quot;sy&quot;&gt;:zip_code&lt;/span&gt; =&amp;gt; &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;32250&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
&lt;span class=&quot;no&quot;&gt;6&lt;/span&gt;   &lt;span class=&quot;sy&quot;&gt;:phone_number&lt;/span&gt; =&amp;gt; &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;877 885 8846&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;no&quot;&gt;7&lt;/span&gt; contact.save&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Now that we have some data, we can query using our named scope:&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt;1&lt;/span&gt; hashrocket = &lt;span class=&quot;co&quot;&gt;Contact&lt;/span&gt;.in_state(&lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;FL&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;).find {|contact| contact.name == &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Hashrocket&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;}&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;And we can even perform partial updates:&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt;1&lt;/span&gt; hashrocket.addresses.first.update_attributes(&lt;span class=&quot;sy&quot;&gt;:street&lt;/span&gt; =&amp;gt; &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;320 First Street North, #712&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;MongoDoc &lt;strong&gt;requires&lt;/strong&gt; mongoDB v1.3 or later.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo gem install mongodoc&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Configuration&lt;/h2&gt;
&lt;p&gt;Configure your database connection in ./mongodb.yml, you do not need one if you are running on localhost with the default port&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;name: test
host: localhost
port: 27017
options:
  auto_reconnect: true&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can change the location of the configuration file:&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;MongoDoc&lt;/span&gt;.config_path = &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;./config/mongodb.yml&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p class=&quot;footnote&quot; id=&quot;fn1&quot;&gt;&lt;a href=&quot;#fnr1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; The Ruby driver exposes an API that understands JSON.&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>Ensure With Explicit Return</title>
    <link rel="alternate" type="text/html" href="http://blog.leshill.org/blog/2009/11/17/ensure-with-explicit-return.html" />
    
    <id>tag:blog.leshill.org,2009-11-17:1258479031</id>
    
    <published>2009-11-17T12:30:31-05:00</published>
    <updated>2009-11-17T12:30:31-05:00</updated>
    <content type="html">&lt;p&gt;Quick! What does the following method do when &lt;code&gt;thing.method_that_might_raise!&lt;/code&gt; raises &lt;code&gt;SomeAppException&lt;/code&gt;?  And why is this a code smell?&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;some_method&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;2&lt;/span&gt;   thing.method_that_might_raise!
&lt;span class=&quot;no&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;ensure&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;4&lt;/span&gt;   &lt;span class=&quot;r&quot;&gt;return&lt;/span&gt; thing
&lt;span class=&quot;no&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Before giving the answers to these two questions, let&amp;#8217;s go over what &lt;code&gt;ensure&lt;/code&gt; does.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;ensure&lt;/code&gt; clause in Ruby is run regardless of whether a block has thrown an exception or not.  A simple example is opening a file&lt;sup class=&quot;footnote&quot; id=&quot;fnr1&quot;&gt;&lt;a href=&quot;#fn1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;file_open_with_auto_close&lt;/span&gt;(name, mode = &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &amp;amp;block)
&lt;span class=&quot;no&quot;&gt; 2&lt;/span&gt;   f = &lt;span class=&quot;co&quot;&gt;File&lt;/span&gt;.open(name, mode)
&lt;span class=&quot;no&quot;&gt; 3&lt;/span&gt;   puts &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;calling your block&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 4&lt;/span&gt;   &lt;span class=&quot;r&quot;&gt;yield&lt;/span&gt; f
&lt;span class=&quot;no&quot;&gt; 5&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;ensure&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 6&lt;/span&gt;   &lt;span class=&quot;r&quot;&gt;if&lt;/span&gt; f
&lt;span class=&quot;no&quot;&gt; 7&lt;/span&gt;     f.close
&lt;span class=&quot;no&quot;&gt; 8&lt;/span&gt;     puts &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;file safely closed&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 9&lt;/span&gt;   &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;11&lt;/span&gt; 
&lt;span class=&quot;no&quot;&gt;12&lt;/span&gt; file_open_with_auto_close(&lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) &lt;span class=&quot;r&quot;&gt;do&lt;/span&gt; |file|
&lt;span class=&quot;no&quot;&gt;13&lt;/span&gt;   file &amp;lt;&amp;lt; &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;14&lt;/span&gt;   raise &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;exception raised&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;17&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#calling your block&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#file safely closed&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;19&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#RuntimeError: exception raised&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;&lt;strong&gt;20&lt;/strong&gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#  from (irb):14&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;21&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#  from (irb):4:in `file_open_with_auto_close'&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;22&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#  from (irb):12&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Even if there is an exception while processing the file, like the one we &lt;code&gt;raise&lt;/code&gt; on line 14, &lt;code&gt;ensure&lt;/code&gt; allows us to close the file.&lt;/p&gt;
&lt;p&gt;After the &lt;code&gt;ensure&lt;/code&gt; clause has run, Ruby either continues the exception handling (in this case &lt;code&gt;irb&lt;/code&gt; rescues it and gives us a stack trace) or continues executing the block.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Except&lt;/strong&gt; if you have an explicit &lt;code&gt;return&lt;/code&gt; statement in your &lt;code&gt;ensure&lt;/code&gt; clause.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s take a look at the difference in &lt;code&gt;irb&lt;/code&gt;, first without an explicit &lt;code&gt;return&lt;/code&gt; statement:&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ensure_without_return&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 2&lt;/span&gt;   &lt;span class=&quot;r&quot;&gt;yield&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 3&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;ensure&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 4&lt;/span&gt;   puts &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ensure&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 5&lt;/span&gt;   &lt;span class=&quot;pc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 6&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 7&lt;/span&gt; 
&lt;span class=&quot;no&quot;&gt; 8&lt;/span&gt; ensure_without_return { puts &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;pc&quot;&gt;false&lt;/span&gt; }
&lt;span class=&quot;no&quot;&gt; 9&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#block&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#ensure&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#=&amp;gt; false&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;14&lt;/span&gt; ensure_without_return { raise &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;exception raised&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;; puts &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;pc&quot;&gt;false&lt;/span&gt; }
&lt;span class=&quot;no&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#ensure&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;17&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#RuntimeError: exception raised&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#  from (irb):21&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;19&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#  from (irb):16:in `ensure_without_return'&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;&lt;strong&gt;20&lt;/strong&gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#  from (irb):21&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Note that although the &lt;code&gt;ensure&lt;/code&gt; clause is run after the block from line 8, it has not changed the return value of the method.&lt;/p&gt;
&lt;p&gt;And now with an explicit &lt;code&gt;return&lt;/code&gt; statement:&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ensure_with_return&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 2&lt;/span&gt;   &lt;span class=&quot;r&quot;&gt;yield&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 3&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;ensure&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 4&lt;/span&gt;   puts &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ensure&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 5&lt;/span&gt;   &lt;span class=&quot;r&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 6&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 7&lt;/span&gt; 
&lt;span class=&quot;no&quot;&gt; 8&lt;/span&gt; ensure_with_return { puts &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;pc&quot;&gt;false&lt;/span&gt; }
&lt;span class=&quot;no&quot;&gt; 9&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#block&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#ensure&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#=&amp;gt; true&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;14&lt;/span&gt; ensure_with_return { raise &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;exception raised&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;; puts &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;pc&quot;&gt;false&lt;/span&gt; }
&lt;span class=&quot;no&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#ensure&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;17&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#=&amp;gt; true&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The first thing to note is that the return of the method is now determined by the &lt;code&gt;return&lt;/code&gt; statement in the &lt;code&gt;ensure&lt;/code&gt; clause on line 5.&lt;/p&gt;
&lt;p&gt;The second thing to note is that the explicit &lt;code&gt;return&lt;/code&gt; statement acts as an implicit &lt;code&gt;rescue&lt;/code&gt; clause, allowing the code to resume as if no exception had been raised.&lt;/p&gt;
&lt;p&gt;Summarizing:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;an &lt;code&gt;ensure&lt;/code&gt; clause runs whether an exception is raised or not&lt;/li&gt;
	&lt;li&gt;an &lt;code&gt;ensure&lt;/code&gt; clause without an explicit &lt;code&gt;return&lt;/code&gt; statement does not alter the return value&lt;/li&gt;
	&lt;li&gt;using the explicit &lt;code&gt;return&lt;/code&gt; changes the control flow as if a &lt;code&gt;rescue Exception&lt;/code&gt; clause was in place before the &lt;code&gt;ensure&lt;/code&gt; clause&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Back to our original questions.  You should now know what the method does when &lt;code&gt;thing.method_that_might_raise!&lt;/code&gt; raises &lt;code&gt;SomeAppException&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But why is this a code smell?  Consider the following code:&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;some_method&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;2&lt;/span&gt;   thing.method_that_might_raise!
&lt;span class=&quot;no&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;Exception&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;4&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;# we have rescued all possible exceptions&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;ensure&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;6&lt;/span&gt;   &lt;span class=&quot;r&quot;&gt;return&lt;/span&gt; thing
&lt;span class=&quot;no&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Line 3 is a code smell.  Rescuing all exceptions is not desirable.  From our exploration of &lt;code&gt;ensure&lt;/code&gt; we can see that this code is the equivalent of the original code.&lt;/p&gt;
&lt;p&gt;Can we refactor it? Yes. Yes we can.&lt;/p&gt;
&lt;p&gt;When we can recover from &lt;code&gt;SomeAppException&lt;/code&gt;, we can just &lt;code&gt;rescue&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;some_method&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;r&quot;&gt;begin&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;3&lt;/span&gt;     thing.method_that_might_raise!
&lt;span class=&quot;no&quot;&gt;4&lt;/span&gt;   &lt;span class=&quot;r&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;SomeAppException&lt;/span&gt; =&amp;gt; e
&lt;span class=&quot;no&quot;&gt;5&lt;/span&gt;     &lt;span class=&quot;c&quot;&gt;# do something clever here&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;6&lt;/span&gt;   &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;7&lt;/span&gt;   thing
&lt;span class=&quot;no&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;And when we cannot recover from &lt;code&gt;SomeAppException&lt;/code&gt;, we just let the exception propagate up the call stack:&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;some_method&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;2&lt;/span&gt;   thing.method_that_might_raise!
&lt;span class=&quot;no&quot;&gt;3&lt;/span&gt;   thing
&lt;span class=&quot;no&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p class=&quot;footnote&quot; id=&quot;fn1&quot;&gt;&lt;a href=&quot;#fnr1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; &lt;code&gt;File.open&lt;/code&gt; already does this.&lt;/p&gt;&lt;!-- #hashrocket --&gt;</content>
  </entry>
  
  <entry>
    <title>Simplified Layout</title>
    <link rel="alternate" type="text/html" href="http://blog.leshill.org/blog/2009/11/15/simplified-layout.html" />
    
    <id>tag:blog.leshill.org,2009-11-15:1258339307</id>
    
    <published>2009-11-15T21:41:47-05:00</published>
    <updated>2009-11-15T21:41:47-05:00</updated>
    <content type="html">&lt;p&gt;Spurred on by the recent blog revamps of some fellow rocketeers, I have done the same and adopted a simple and direct layout. As is often the case, the restyling was really an opportunity to refactor and rethink.&lt;/p&gt;
&lt;p&gt;The most important refactoring was to break the myth of the &lt;strong&gt;fold&lt;/strong&gt; with the blog archives. Previously, I was using &lt;a href=&quot;http://webby.rubyforge.org&quot;&gt;Webby&lt;/a&gt;&amp;#8216;s year and month index pages as the organization for the archives. Now the archives are on a single page as a reverse-chronological list that extends beneath the &lt;strong&gt;fold&lt;/strong&gt;. The conventional wisdom on the &lt;strong&gt;fold&lt;/strong&gt; is &amp;#8217;do not make your users scroll&amp;#8217;.  And it is wrong.  Research has show that users do scroll&lt;sup class=&quot;footnote&quot; id=&quot;fnr1&quot;&gt;&lt;a href=&quot;#fn1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. Scrolling down a reverse-chronological list of posts does not make the user think &amp;#8212; the only organizing principle simpler than a reverse-chronological list is just an unorderd list. And that would not have been helpful.&lt;/p&gt;
&lt;p class=&quot;footnote&quot; id=&quot;fn1&quot;&gt;&lt;a href=&quot;#fnr1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; And it has for a long time! Here is &lt;a href=&quot;http://www.useit.com/alertbox/9712a.html&quot;&gt;Jakob Nielsen&lt;/a&gt;&amp;#8217;s take in 1997!&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>The Simplest Thing That Could Possibly Work (With Gems)</title>
    <link rel="alternate" type="text/html" href="http://blog.leshill.org/blog/2009/10/11/the-simplest-thing-that-could-possibly-work-with-gems.html" />
    
    <id>tag:blog.leshill.org,2009-10-11:1255271197</id>
    
    <published>2009-10-11T10:26:37-04:00</published>
    <updated>2009-10-11T10:26:37-04:00</updated>
    <content type="html">&lt;p&gt;There has been some turmoil in the Ruby community over the &lt;a href=&quot;http://github.com&quot;&gt;github&lt;/a&gt; decision to stop building gems.&lt;/p&gt;
&lt;p&gt;Since I have a forked gem that was previously hosted on github, I and my fellow users of the fork are directly affected.&lt;/p&gt;
&lt;p&gt;In my case, I am going to do the simplest thing that could possibly work.  Move my existing published gem under the same name&lt;sup class=&quot;footnote&quot; id=&quot;fnr1&quot;&gt;&lt;a href=&quot;#fn1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; (&lt;code&gt;leshill-will_paginate&lt;/code&gt;) over to &lt;a href=&quot;http://gemcutter.org&quot;&gt;Gemcutter&lt;/a&gt;.  Why not follow along?&lt;/p&gt;
&lt;p&gt;Before getting started, I signed up with Gemcutter (go ahead, do so now).  Once you have confirmed your account, follow the very clear instructions and add your API key to &lt;code&gt;~/.gemrc&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gemcutter_key: NOT_MY_REAL_API_KEY&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Gemcutter runs as a plugin to RubyGems, so lets install and configure it.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo gem install gemcutter
gem tumble&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Great!  We are ready to start publishing. Gemcutter only accepts prebuilt gems, so we will have to build our gem locally first. Before doing that I will modify the &lt;code&gt;gemspec&lt;/code&gt; to make it clear that this is a fork by changing the name&lt;sup class=&quot;footnote&quot; id=&quot;fnr2&quot;&gt;&lt;a href=&quot;#fn2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; and a few other fields.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Gem::Specification.new do |s|
  s.name    = 'leshill-will_paginate'
  s.version = '2.3.11'
  s.date    = '2009-10-11'
  s.summary = &quot;Fork of the Most awesome pagination solution for Rails&quot;
  s.description = &quot;The will_paginate library provides a simple, yet powerful and extensible API for ActiveRecord pagination and rendering of pagination links in ActionView templates.&quot;
  s.authors  = ['Les Hill', 'Mislav Marohnić', 'PJ Hyett']
  s.email    = 'someone@example.com'
  s.homepage = 'http://github.com/leshill/will_paginate'&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ok, now we can build it.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gem build will_paginate.gemspec&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ready?  Let&amp;#8217;s push it up to Gemcutter&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gem push leshill-will_paginate-2.3.11.gem&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can now install my fork of &lt;a href=&quot;http://github.com/leshill/will_paginate&quot;&gt;will_paginate&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo gem install leshill-will_paginate&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Done!&lt;/p&gt;
&lt;p class=&quot;footnote&quot; id=&quot;fn1&quot;&gt;&lt;a href=&quot;#fnr1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; This is one source of heat (of many?) in the current &amp;#8216;What to do?&amp;#8217; gem discussion.  Who knew we were all unhappy with the github decision to publish gems as &lt;code&gt;user-gemname&lt;/code&gt;?&lt;/p&gt;
&lt;p class=&quot;footnote&quot; id=&quot;fn2&quot;&gt;&lt;a href=&quot;#fnr2&quot;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; github prepended the github user automatically, now we have to do so explicitly in the &lt;code&gt;gemspec&lt;/code&gt;.&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>and vs &amp;amp;&amp;amp; - Fight!</title>
    <link rel="alternate" type="text/html" href="http://blog.leshill.org/blog/2009/10/09/and-v.html" />
    
    <id>tag:blog.leshill.org,2009-10-09:1255112554</id>
    
    <published>2009-10-09T14:22:34-04:00</published>
    <updated>2009-10-09T14:22:34-04:00</updated>
    <content type="html">&lt;p&gt;At &lt;a href=&quot;http://hashrocket.com&quot;&gt;Hashrocket&lt;/a&gt; we are always expressing our views on code, both the good and the bad, about both our own code and code written by others. Recently, the issue of when to use the two flavors of Ruby logic operators: the punctation operators &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;, &lt;code&gt;||&lt;/code&gt;, &lt;code&gt;!&lt;/code&gt; or the english operators &lt;code&gt;and&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt;, &lt;code&gt;not&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Developers new to Ruby&lt;sup class=&quot;footnote&quot; id=&quot;fnr1&quot;&gt;&lt;a href=&quot;#fn1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; should be following the rule to only use the punctuation operators for logic:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;editable = user.admin? || item.editable?&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;if user.admin? &amp;amp;&amp;amp; item.editable?&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and the english operators for flow control:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;render :action =&amp;gt; 'edit' and return if editable&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once developers are proficient (see below for a quiz!) in Ruby, this rule should become a rule of thumb or just ignored.  For example, this reads better with &lt;code&gt;and&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if user.admin? and item.editable?&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So how do you know if you should be following the rule or just be aware of it? Answer this:&lt;/p&gt;
&lt;p&gt;What happens if we replace the &lt;code&gt;||&lt;/code&gt; with &lt;code&gt;or&lt;/code&gt; in the first example and why?&lt;sup class=&quot;footnote&quot; id=&quot;fnr2&quot;&gt;&lt;a href=&quot;#fn2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot; id=&quot;fn1&quot;&gt;&lt;a href=&quot;#fnr1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; Excluding those who are proficient in other languages and already recognize the issue.&lt;/p&gt;
&lt;p class=&quot;footnote&quot; id=&quot;fn2&quot;&gt;&lt;a href=&quot;#fnr2&quot;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; Did not know the answer?  Take a minute and learn &lt;a href=&quot;http://phrogz.net/ProgrammingRuby/language.html#table_18.4&quot;&gt;Ruby&amp;#8217;s operator precedence&lt;/a&gt;&lt;/p&gt;</content>
  </entry>
  
</feed>
