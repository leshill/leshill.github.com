<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title>Wonderland</title>
  <subtitle>A Blog</subtitle>
  <link href="http://feeds2.feedburner.com/leshill" type="application/atom+xml" rel="self" />
  <link href="http://blog.leshill.org/" type="text/html" rel="alternate" />
  <updated>2009-09-30T00:20:47-04:00</updated>
  <author>
    <name>Les Hill</name>
    <email>blog@leshill.org</email>
  </author>
  <id>http://blog.leshill.org/</id>
  
  <entry>
    <title>Best Practice: No Chains in Controllers</title>
    <link rel="alternate" type="text/html" href="http://blog.leshill.org/blog/2009/09/29/best-practice-no-chains-in-controllers.html" />
    
    <id>tag:blog.leshill.org,2009-09-29:1254281940</id>
    
    <published>2009-09-29T23:39:00-04:00</published>
    <updated>2009-09-29T23:39:00-04:00</updated>
    <content type="html">&lt;p&gt;Dan Croak just posted &lt;a href=&quot;http://robots.thoughtbot.com/post/200254501/testing-named-scopes&quot;&gt;testing named scopes&lt;/a&gt; which you should read right now.&lt;/p&gt;
&lt;p&gt;We also have been using the rule of thumb in the last paragraph: No Chains in Controllers.  Our experience is that not only do you immediately benefit from simpler tests, but we have also found that you get simpler and more expressive implementations.  If we do end up using a chain we usually encapsulate it in a method, keeping the tests and code clean.&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>Update for stub_chain for Mocha</title>
    <link rel="alternate" type="text/html" href="http://blog.leshill.org/blog/2009/08/05/update-for-stub-chain-for-mocha.html" />
    
    <id>tag:blog.leshill.org,2009-08-05:1249495362</id>
    
    <published>2009-08-05T14:02:42-04:00</published>
    <updated>2009-08-05T14:02:42-04:00</updated>
    <content type="html">&lt;p&gt;Thanks to &lt;a href=&quot;http://technicalpickles.com&quot;&gt;Josh Nichols&lt;/a&gt; for pointing out that the original code (and the RSpec mock code!) did not handle stubbing the same part of the chain multiple times, for example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;stub_chain(:votes, :supporting, :count).returns(supporting_count)
stub_chain(:votes, :opposing, :count).returns(opposing_count)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here is the updated snippet that works when you stub the same part of the chain multiple times:&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;cl&quot;&gt;StubChainMocha&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 2&lt;/span&gt;   &lt;span class=&quot;r&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;cl&quot;&gt;Object&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 3&lt;/span&gt;     &lt;span class=&quot;r&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;stub_chain&lt;/span&gt;(*methods)
&lt;span class=&quot;no&quot;&gt; 4&lt;/span&gt;       &lt;span class=&quot;r&quot;&gt;if&lt;/span&gt; methods.length &amp;gt; &lt;span class=&quot;i&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 5&lt;/span&gt;         next_in_chain = ::&lt;span class=&quot;co&quot;&gt;Object&lt;/span&gt;.new
&lt;span class=&quot;no&quot;&gt; 6&lt;/span&gt;         stubs(methods.shift).returns(next_in_chain)
&lt;span class=&quot;no&quot;&gt; 7&lt;/span&gt;         next_in_chain.stub_chain(*methods)
&lt;span class=&quot;no&quot;&gt; 8&lt;/span&gt;       &lt;span class=&quot;r&quot;&gt;else&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 9&lt;/span&gt;         stubs(methods.shift)
&lt;span class=&quot;no&quot;&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;/span&gt;       &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;11&lt;/span&gt;     &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;12&lt;/span&gt;   &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;14&lt;/span&gt; 
&lt;span class=&quot;no&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;Object&lt;/span&gt;.send(&lt;span class=&quot;sy&quot;&gt;:include&lt;/span&gt;, &lt;span class=&quot;co&quot;&gt;StubChainMocha&lt;/span&gt;::&lt;span class=&quot;co&quot;&gt;Object&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Copy that into &lt;code&gt;spec/stub_chain_mocha.rb&lt;/code&gt; and then require it from &lt;code&gt;spec_helper.rb&lt;/code&gt;.&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>Bouncy Bots!</title>
    <link rel="alternate" type="text/html" href="http://blog.leshill.org/blog/2009/07/01/bouncy-bots.html" />
    
    <id>tag:blog.leshill.org,2009-07-01:1246457310</id>
    
    <published>2009-07-01T10:08:30-04:00</published>
    <updated>2009-07-01T10:08:30-04:00</updated>
    <content type="html">&lt;h3&gt;A simple negative captcha for Rails.&lt;/h3&gt;
&lt;p&gt;A negative captcha flips the normal captcha on its head, rather than asking humans identify themselves, we trick the bots into identifying themselves.  We do this by placing honey pots in a form that are invisible to a human, but visible to a bot.  When the bot submits the form, we look for the honey pot entries and discard the form submission if we find any.&lt;/p&gt;
&lt;p&gt;The source is MIT licensed and available on &lt;a href=&quot;http://github.com/leshill/bouncy_bots/tree/master&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Installing Bouncy Bots!&lt;/h3&gt;
&lt;p&gt;Bouncy Bots! is available as a gem from github.  Install the gem with the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;% sudo gem install --source http://gems.github.com/ leshill-bouncy_bots&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After you have the gem installed, add a &lt;code&gt;config.gem&lt;/code&gt; line to your &lt;code&gt;environment.rb&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt;1&lt;/span&gt; config.gem &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;leshill-bouncy_bots&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;sy&quot;&gt;:lib&lt;/span&gt; =&amp;gt; &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;bouncy_bots&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;sy&quot;&gt;:version&lt;/span&gt; =&amp;gt; &lt;span class=&quot;fl&quot;&gt;0.1&lt;/span&gt;.&lt;span class=&quot;i&quot;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;Using Bouncy Bots!&lt;/h3&gt;
&lt;h4&gt;Controllers&lt;/h4&gt;
&lt;p&gt;Use the &lt;code&gt;bounce_bots&lt;/code&gt; macro in your controllers to detect and bounce bots.  The macro takes two parameters, the honey pot field name and the redirect path or url.  For example, to check for the field &lt;code&gt;:blog_url&lt;/code&gt; and redirect bots to the &lt;code&gt;pages_path&lt;/code&gt; :&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt;1&lt;/span&gt; bounce_bots &lt;span class=&quot;sy&quot;&gt;:blog_url&lt;/span&gt;, &lt;span class=&quot;sy&quot;&gt;:pages_path&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;You can also pass the standard controller filter options such as &lt;code&gt;:only&lt;/code&gt; or &lt;code&gt;:except&lt;/code&gt; :&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt;1&lt;/span&gt; bounce_bots &lt;span class=&quot;sy&quot;&gt;:blog_url&lt;/span&gt;, &lt;span class=&quot;sy&quot;&gt;:pages_path&lt;/span&gt;, &lt;span class=&quot;sy&quot;&gt;:only&lt;/span&gt; =&amp;gt; [&lt;span class=&quot;sy&quot;&gt;:create&lt;/span&gt;, &lt;span class=&quot;sy&quot;&gt;:update&lt;/span&gt;]&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h4&gt;Views&lt;/h4&gt;
&lt;p&gt;In your form views, add the honey pot field.  If you are using &lt;code&gt;form_tag&lt;/code&gt;, you can use any form element, for example (using &lt;a href=&quot;http://haml.hamptoncatlin.com/&quot;&gt;haml&lt;/a&gt;):&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt;1&lt;/span&gt; = text_field_tag &lt;span class=&quot;sy&quot;&gt;:blog_url&lt;/span&gt;, &lt;span class=&quot;pc&quot;&gt;nil&lt;/span&gt;, &lt;span class=&quot;sy&quot;&gt;:class&lt;/span&gt; =&amp;gt; &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;long_required&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In your stylesheet, add a rule to &amp;#8216;hide&amp;#8217; the field:&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;cl&quot;&gt;.long_required&lt;/span&gt; { &lt;span class=&quot;ke&quot;&gt;display&lt;/span&gt;:&lt;span class=&quot;vl&quot;&gt;none&lt;/span&gt;; }&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;If you use &lt;code&gt;form_for&lt;/code&gt;, there are two helpers to simplify making the honey pot.&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt;1&lt;/span&gt; = f.bounce_label &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Blog Url&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;sy&quot;&gt;:class&lt;/span&gt; =&amp;gt; &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;long_required&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;2&lt;/span&gt; %br
&lt;span class=&quot;no&quot;&gt;3&lt;/span&gt; = f.bounce_field &lt;span class=&quot;sy&quot;&gt;:class&lt;/span&gt; =&amp;gt; &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;long_required&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And that&amp;#8217;s it.&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>Semantic List Markup with will_paginate</title>
    <link rel="alternate" type="text/html" href="http://blog.leshill.org/blog/2009/06/27/semantic-list-markup-with-will-paginate.html" />
    
    <id>tag:blog.leshill.org,2009-06-27:1246106129</id>
    
    <published>2009-06-27T08:35:29-04:00</published>
    <updated>2009-06-27T08:35:29-04:00</updated>
    <content type="html">&lt;h3&gt;will_paginate using ul and li tags&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://github.com/mislav/will_paginate/tree/master&quot;&gt;will_paginate&lt;/a&gt; is the defacto standard plugin for the Rails community.  Almost every app will need pagination and &lt;strong&gt;will_paginate&lt;/strong&gt; does &lt;em&gt;almost&lt;/em&gt; everything you need.&lt;/p&gt;
&lt;p&gt;The one thing will_paginate does not do is generate &lt;em&gt;semantic&lt;/em&gt; pagination markup.  Semantic markup uses standard HTML tags to convey structure and meaning.  For example using an &lt;code&gt;h1&lt;/code&gt; tag for a heading rather than styling a &lt;code&gt;div&lt;/code&gt; tag to do the same.&lt;/p&gt;
&lt;p&gt;The default &lt;strong&gt;will_paginate&lt;/strong&gt; pagination is a series of anchors and spans strung together.  As many a designer has pointed out, that series is really a list of pagination controls.  If you are working with such a designer or you are writing semantic markup, try out my &lt;a href=&quot;http://github.com/leshill/will_paginate/tree/master&quot;&gt;fork&lt;/a&gt; and enjoy &lt;strong&gt;will_paginate&lt;/strong&gt; with semantic pagination.&lt;/p&gt;
&lt;h3&gt;How to install&lt;/h3&gt;
&lt;p&gt;As of this moment, you can install it as a plugin.  I am considering releasing this as a gem; ideally the patch to &lt;strong&gt;will_paginate&lt;/strong&gt; would be accepted (see below).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;%script/plugin install git://github.com/leshill/will_paginate.git&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;How to use&lt;/h3&gt;
&lt;p&gt;Use the &lt;code&gt;will_paginate&lt;/code&gt; view helper, passing the &lt;code&gt;:semantic =&amp;gt; true&lt;/code&gt; option.  If you do not want the enclosing &lt;code&gt;ul&lt;/code&gt; tag, pass &lt;code&gt;:container =&amp;gt; false&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;%= will_paginate @pages, :semantic =&amp;gt; true %&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which looks like:&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;ta&quot;&gt;&amp;lt;ul&lt;/span&gt; &lt;span class=&quot;an&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;pagination&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;ta&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 2&lt;/span&gt;   &lt;span class=&quot;ta&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;an&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;disabled prev_page&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;ta&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;en&quot;&gt;&amp;amp;laquo;&lt;/span&gt; Previous&lt;span class=&quot;ta&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 3&lt;/span&gt;   &lt;span class=&quot;ta&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;an&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;ta&quot;&gt;&amp;gt;&lt;/span&gt;1&lt;span class=&quot;ta&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 4&lt;/span&gt;   &lt;span class=&quot;ta&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;&lt;span class=&quot;ta&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;an&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;/pages?page=2&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;an&quot;&gt;rel&lt;/span&gt;=&lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;ta&quot;&gt;&amp;gt;&lt;/span&gt;2&lt;span class=&quot;ta&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;span class=&quot;ta&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 5&lt;/span&gt;   &lt;span class=&quot;ta&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;&lt;span class=&quot;ta&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;an&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;/pages?page=3&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;ta&quot;&gt;&amp;gt;&lt;/span&gt;3&lt;span class=&quot;ta&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;span class=&quot;ta&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 6&lt;/span&gt;   &lt;span class=&quot;ta&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;&lt;span class=&quot;ta&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;an&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;/pages?page=4&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;ta&quot;&gt;&amp;gt;&lt;/span&gt;4&lt;span class=&quot;ta&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;span class=&quot;ta&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 7&lt;/span&gt;   &lt;span class=&quot;ta&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;&lt;span class=&quot;ta&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;an&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;/pages?page=5&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;ta&quot;&gt;&amp;gt;&lt;/span&gt;5&lt;span class=&quot;ta&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;span class=&quot;ta&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 8&lt;/span&gt;   &lt;span class=&quot;ta&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;&lt;span class=&quot;ta&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;an&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;/pages?page=6&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;ta&quot;&gt;&amp;gt;&lt;/span&gt;6&lt;span class=&quot;ta&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;span class=&quot;ta&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 9&lt;/span&gt;   &lt;span class=&quot;ta&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;&lt;span class=&quot;ta&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;an&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;/pages?page=7&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;ta&quot;&gt;&amp;gt;&lt;/span&gt;7&lt;span class=&quot;ta&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;span class=&quot;ta&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;/span&gt;   &lt;span class=&quot;ta&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;&lt;span class=&quot;ta&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;an&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;/pages?page=8&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;ta&quot;&gt;&amp;gt;&lt;/span&gt;8&lt;span class=&quot;ta&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;span class=&quot;ta&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;11&lt;/span&gt;   &lt;span class=&quot;ta&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;&lt;span class=&quot;ta&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;an&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;/pages?page=9&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;ta&quot;&gt;&amp;gt;&lt;/span&gt;9&lt;span class=&quot;ta&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;span class=&quot;ta&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;12&lt;/span&gt;   &lt;span class=&quot;ta&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;an&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;gap&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;ta&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;en&quot;&gt;&amp;amp;hellip;&lt;/span&gt;&lt;span class=&quot;ta&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;13&lt;/span&gt;   &lt;span class=&quot;ta&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;&lt;span class=&quot;ta&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;an&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;/pages?page=33&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;ta&quot;&gt;&amp;gt;&lt;/span&gt;33&lt;span class=&quot;ta&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;span class=&quot;ta&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;14&lt;/span&gt;   &lt;span class=&quot;ta&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;&lt;span class=&quot;ta&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;an&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;/pages?page=34&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;ta&quot;&gt;&amp;gt;&lt;/span&gt;34&lt;span class=&quot;ta&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;span class=&quot;ta&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;15&lt;/span&gt;   &lt;span class=&quot;ta&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;an&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;next_page&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;ta&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;ta&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;an&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;/pages?page=2&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;an&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;next_page&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;an&quot;&gt;rel&lt;/span&gt;=&lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;ta&quot;&gt;&amp;gt;&lt;/span&gt;Next &lt;span class=&quot;en&quot;&gt;&amp;amp;raquo;&lt;/span&gt;&lt;span class=&quot;ta&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;span class=&quot;ta&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;ta&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;Will this patch be accepted?&lt;/h3&gt;
&lt;p&gt;Signs point to &amp;#8216;uncertain&amp;#8217;.  Mislav has in the past indicated that he was not convinced that list support was necessary in the plugin since you can replace the renderer&lt;sup class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.  Since semantic markup is commonly used, I have sent a pull request.  In any event, the authors of &lt;strong&gt;will_paginate&lt;/strong&gt; have my thanks for creating a very useful plugin.&lt;/p&gt;
&lt;p class=&quot;footnote&quot; id=&quot;fn1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt; So why the fork?  In order to support the containing &lt;code&gt;ul&lt;/code&gt; directly, the core of the helper had to be modified. See the change on &lt;a href=&quot;http://github.com/leshill/will_paginate/commit/6db9356185c9172d35d548000ab91d1bd8cbc7b2&quot;&gt;github&lt;/a&gt; .&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>Default Options With Ruby</title>
    <link rel="alternate" type="text/html" href="http://blog.leshill.org/blog/2009/06/10/default-options-with-ruby.html" />
    
    <id>tag:blog.leshill.org,2009-06-10:1244676887</id>
    
    <published>2009-06-10T19:34:47-04:00</published>
    <updated>2009-06-10T19:34:47-04:00</updated>
    <content type="html">&lt;h3&gt;Ruby and the argument collecting hash syntax&lt;/h3&gt;
&lt;p&gt;Unlike other languages, ruby does not support keyword parameters.  As an alternative, we use ruby&amp;#8217;s syntactic shorthand to pass a hash as the final argument to a method using the &lt;code&gt;key =&amp;gt; value&lt;/code&gt; syntax:&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt;1&lt;/span&gt; some_method(first_arg, &lt;span class=&quot;sy&quot;&gt;:key1&lt;/span&gt; =&amp;gt; value1, &lt;span class=&quot;sy&quot;&gt;:key2&lt;/span&gt; =&amp;gt; value2)&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code&gt;some_method&lt;/code&gt; will receive a hash as its second argument with the specified key/value pairs.  Unlike regular arguments, there is no way to provide default values for the individual key/value pairs (you can provide a default for the hash argument though):&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;some_method&lt;/span&gt;(thing, options = {})
&lt;span class=&quot;no&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;#...&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;There are a few ruby idioms for providing default options to an option hash, one of the most common is available in rails, using the core extension &lt;code&gt;Hash#reverse_merge&lt;/code&gt; from &lt;code&gt;ActiveSupport&lt;/code&gt;&lt;sup class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;some_method&lt;/span&gt;(thing, options = {})
&lt;span class=&quot;no&quot;&gt;2&lt;/span&gt;   options.reverse_merge!({&lt;span class=&quot;sy&quot;&gt;:key1&lt;/span&gt; =&amp;gt; &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;})
&lt;span class=&quot;no&quot;&gt;3&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;#...&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;If you do not have access to &lt;code&gt;ActiveSupport&lt;/code&gt;, you can use ruby&amp;#8217;s &lt;code&gt;Hash#merge&lt;/code&gt;&lt;sup class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; as an alternative:&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;some_method&lt;/span&gt;(thing, options = {})
&lt;span class=&quot;no&quot;&gt;2&lt;/span&gt;   options = {&lt;span class=&quot;sy&quot;&gt;:key1&lt;/span&gt; =&amp;gt; &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;}.merge(options)
&lt;span class=&quot;no&quot;&gt;3&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;#...&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;If that seems like too much code to be typing all the time, you can open up &lt;code&gt;Hash&lt;/code&gt; and add a method.  Careful!  This is simple enough to get wrong.  Here is some code&lt;sup class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn3&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; from a very useful rails plugin:&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;default!&lt;/span&gt;(defaults = {})
&lt;span class=&quot;no&quot;&gt;2&lt;/span&gt;   defaults.each &lt;span class=&quot;r&quot;&gt;do&lt;/span&gt; |key, value|
&lt;span class=&quot;no&quot;&gt;3&lt;/span&gt;     &lt;span class=&quot;pc&quot;&gt;self&lt;/span&gt;[key] = value &lt;span class=&quot;r&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;pc&quot;&gt;self&lt;/span&gt;[key].nil?
&lt;span class=&quot;no&quot;&gt;4&lt;/span&gt;   &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;5&lt;/span&gt;   &lt;span class=&quot;pc&quot;&gt;self&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This code works until you want to set a default value to &lt;code&gt;nil&lt;/code&gt;.  This can be fixed by replacing the conditional on line three with &lt;code&gt;unless self.has_key?(key)&lt;/code&gt;.  Or you can simply rewrite this in terms of &lt;code&gt;Hash#merge&lt;/code&gt;&lt;sup class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn4&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;default!&lt;/span&gt;(defaults = {})
&lt;span class=&quot;no&quot;&gt;2&lt;/span&gt;   replace(defaults.merge(&lt;span class=&quot;pc&quot;&gt;self&lt;/span&gt;))
&lt;span class=&quot;no&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&quot;footnote&quot; id=&quot;fn1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt; Which builds on ruby&amp;#8217;s &lt;code&gt;Hash#merge&lt;/code&gt;.&lt;/p&gt;
&lt;p class=&quot;footnote&quot; id=&quot;fn2&quot;&gt;&lt;sup&gt;2&lt;/sup&gt; Or merge-bang (&lt;code&gt;merge!&lt;/code&gt;).&lt;/p&gt;
&lt;p class=&quot;footnote&quot; id=&quot;fn3&quot;&gt;&lt;sup&gt;3&lt;/sup&gt; Slightly modified for readability.&lt;/p&gt;
&lt;p class=&quot;footnote&quot; id=&quot;fn4&quot;&gt;&lt;sup&gt;4&lt;/sup&gt; &lt;code&gt;ActiveSupport&lt;/code&gt; does something similar.&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>Truncating HTML</title>
    <link rel="alternate" type="text/html" href="http://blog.leshill.org/blog/2009/06/03/truncating-html.html" />
    
    <id>tag:blog.leshill.org,2009-06-03:1244046220</id>
    
    <published>2009-06-03T12:23:40-04:00</published>
    <updated>2009-06-03T12:23:40-04:00</updated>
    <content type="html">&lt;p&gt;We recently needed to show a truncated version of existing HTML content.  Although there are several issues&lt;sup class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; when dealing with HTML content, our specific concern was maintaining the integrity of the HTML.   Some quick googling led to a nice helper written by &lt;a href=&quot;http://henrik.nyh.se&quot;&gt;Henrik Nyh&lt;/a&gt; last year.  We tweaked the original a bit to append the ellipsis within the tag at the truncation point and truncate at a word (or tag) boundary.  Here it is, enjoy.&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# By Henrik Nyh &amp;lt;http://henrik.nyh.se&amp;gt; 2008-01-30.&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 2&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Free to modify and redistribute with credit.&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 3&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Word truncation and fixes by Les Hill &amp;lt;http://blog.leshill.org&amp;gt; 2009-06-02&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 4&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 5&lt;/span&gt; 
&lt;span class=&quot;no&quot;&gt; 6&lt;/span&gt; require &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;rubygems&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 7&lt;/span&gt; require &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;hpricot&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 8&lt;/span&gt; 
&lt;span class=&quot;no&quot;&gt; 9&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;cl&quot;&gt;TextHelper&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;/span&gt; 
&lt;span class=&quot;no&quot;&gt;11&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;# Like the Rails _truncate_ helper but doesn't break HTML tags or entities.&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;12&lt;/span&gt;   &lt;span class=&quot;r&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;truncate_html&lt;/span&gt;(text, max_length = &lt;span class=&quot;i&quot;&gt;30&lt;/span&gt;, ellipsis = &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;no&quot;&gt;13&lt;/span&gt;     &lt;span class=&quot;r&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;if&lt;/span&gt; text.nil?
&lt;span class=&quot;no&quot;&gt;14&lt;/span&gt;     doc = Hpricot(text.to_s)
&lt;span class=&quot;no&quot;&gt;15&lt;/span&gt;     doc.inner_text.chars.length &amp;gt; max_length ? doc.truncate(max_length, ellipsis).inner_html : text.to_s
&lt;span class=&quot;no&quot;&gt;16&lt;/span&gt;   &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;17&lt;/span&gt; 
&lt;span class=&quot;no&quot;&gt;18&lt;/span&gt;   &lt;span class=&quot;r&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;pc&quot;&gt;self&lt;/span&gt;.truncate_at_space(text, max_length, ellipsis = &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;no&quot;&gt;19&lt;/span&gt;     l = [max_length - ellipsis.length, &lt;span class=&quot;i&quot;&gt;0&lt;/span&gt;].max
&lt;span class=&quot;no&quot;&gt;&lt;strong&gt;20&lt;/strong&gt;&lt;/span&gt;     stop = text.rindex(&lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt; &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, l) || &lt;span class=&quot;i&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;21&lt;/span&gt;     (text.length &amp;gt; max_length ? text[&lt;span class=&quot;i&quot;&gt;0&lt;/span&gt;...stop] + ellipsis : text).to_s
&lt;span class=&quot;no&quot;&gt;22&lt;/span&gt;   &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;23&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;24&lt;/span&gt; 
&lt;span class=&quot;no&quot;&gt;25&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;cl&quot;&gt;HpricotTruncator&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;26&lt;/span&gt;   &lt;span class=&quot;r&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;cl&quot;&gt;NodeWithChildren&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;27&lt;/span&gt;     &lt;span class=&quot;r&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;truncate&lt;/span&gt;(max_length, ellipsis)
&lt;span class=&quot;no&quot;&gt;28&lt;/span&gt;       &lt;span class=&quot;r&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pc&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;if&lt;/span&gt; inner_text.chars.length &amp;lt;= max_length
&lt;span class=&quot;no&quot;&gt;29&lt;/span&gt;       truncated_node = dup
&lt;span class=&quot;no&quot;&gt;&lt;strong&gt;30&lt;/strong&gt;&lt;/span&gt;       truncated_node.name = name
&lt;span class=&quot;no&quot;&gt;31&lt;/span&gt;       truncated_node.raw_attributes = raw_attributes
&lt;span class=&quot;no&quot;&gt;32&lt;/span&gt;       truncated_node.children = []
&lt;span class=&quot;no&quot;&gt;33&lt;/span&gt;       each_child &lt;span class=&quot;r&quot;&gt;do&lt;/span&gt; |node|
&lt;span class=&quot;no&quot;&gt;34&lt;/span&gt;         &lt;span class=&quot;r&quot;&gt;break&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;if&lt;/span&gt; max_length &amp;lt;= &lt;span class=&quot;i&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;35&lt;/span&gt;         node_length = node.inner_text.chars.length
&lt;span class=&quot;no&quot;&gt;36&lt;/span&gt;         truncated_node.children &amp;lt;&amp;lt; node.truncate(max_length, ellipsis)
&lt;span class=&quot;no&quot;&gt;37&lt;/span&gt;         max_length = max_length - node_length
&lt;span class=&quot;no&quot;&gt;38&lt;/span&gt;       &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;39&lt;/span&gt;       truncated_node
&lt;span class=&quot;no&quot;&gt;&lt;strong&gt;40&lt;/strong&gt;&lt;/span&gt;     &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;41&lt;/span&gt;   &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;42&lt;/span&gt; 
&lt;span class=&quot;no&quot;&gt;43&lt;/span&gt;   &lt;span class=&quot;r&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;cl&quot;&gt;TextNode&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;44&lt;/span&gt;     &lt;span class=&quot;r&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;truncate&lt;/span&gt;(max_length, ellipsis)
&lt;span class=&quot;no&quot;&gt;45&lt;/span&gt;       &lt;span class=&quot;pc&quot;&gt;self&lt;/span&gt;.content = &lt;span class=&quot;co&quot;&gt;TextHelper&lt;/span&gt;.truncate_at_space(content, max_length, ellipsis)
&lt;span class=&quot;no&quot;&gt;46&lt;/span&gt;       &lt;span class=&quot;pc&quot;&gt;self&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;47&lt;/span&gt;     &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;48&lt;/span&gt;   &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;49&lt;/span&gt; 
&lt;span class=&quot;no&quot;&gt;&lt;strong&gt;50&lt;/strong&gt;&lt;/span&gt;   &lt;span class=&quot;r&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;cl&quot;&gt;IgnoredTag&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;51&lt;/span&gt;     &lt;span class=&quot;r&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;truncate&lt;/span&gt;(max_length, ellipsis)
&lt;span class=&quot;no&quot;&gt;52&lt;/span&gt;       &lt;span class=&quot;pc&quot;&gt;self&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;53&lt;/span&gt;     &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;54&lt;/span&gt;   &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;55&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;56&lt;/span&gt; 
&lt;span class=&quot;no&quot;&gt;57&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;Hpricot&lt;/span&gt;::&lt;span class=&quot;co&quot;&gt;Doc&lt;/span&gt;.send(&lt;span class=&quot;sy&quot;&gt;:include&lt;/span&gt;,       &lt;span class=&quot;co&quot;&gt;HpricotTruncator&lt;/span&gt;::&lt;span class=&quot;co&quot;&gt;NodeWithChildren&lt;/span&gt;)
&lt;span class=&quot;no&quot;&gt;58&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;Hpricot&lt;/span&gt;::&lt;span class=&quot;co&quot;&gt;Elem&lt;/span&gt;.send(&lt;span class=&quot;sy&quot;&gt;:include&lt;/span&gt;,      &lt;span class=&quot;co&quot;&gt;HpricotTruncator&lt;/span&gt;::&lt;span class=&quot;co&quot;&gt;NodeWithChildren&lt;/span&gt;)
&lt;span class=&quot;no&quot;&gt;59&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;Hpricot&lt;/span&gt;::&lt;span class=&quot;co&quot;&gt;Text&lt;/span&gt;.send(&lt;span class=&quot;sy&quot;&gt;:include&lt;/span&gt;,      &lt;span class=&quot;co&quot;&gt;HpricotTruncator&lt;/span&gt;::&lt;span class=&quot;co&quot;&gt;TextNode&lt;/span&gt;)
&lt;span class=&quot;no&quot;&gt;&lt;strong&gt;60&lt;/strong&gt;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;Hpricot&lt;/span&gt;::&lt;span class=&quot;co&quot;&gt;BogusETag&lt;/span&gt;.send(&lt;span class=&quot;sy&quot;&gt;:include&lt;/span&gt;, &lt;span class=&quot;co&quot;&gt;HpricotTruncator&lt;/span&gt;::&lt;span class=&quot;co&quot;&gt;IgnoredTag&lt;/span&gt;)
&lt;span class=&quot;no&quot;&gt;61&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;Hpricot&lt;/span&gt;::&lt;span class=&quot;co&quot;&gt;Comment&lt;/span&gt;.send(&lt;span class=&quot;sy&quot;&gt;:include&lt;/span&gt;,   &lt;span class=&quot;co&quot;&gt;HpricotTruncator&lt;/span&gt;::&lt;span class=&quot;co&quot;&gt;IgnoredTag&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&quot;footnote&quot; id=&quot;fn1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt; For example: preventing XSS attacks, maintaining coherent styling.&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>AWS S3 Bucket Copy</title>
    <link rel="alternate" type="text/html" href="http://blog.leshill.org/blog/2009/05/28/aws-s3-bucket-copy.html" />
    
    <id>tag:blog.leshill.org,2009-05-28:1243539824</id>
    
    <published>2009-05-28T15:43:44-04:00</published>
    <updated>2009-05-28T15:43:44-04:00</updated>
    <content type="html">&lt;p&gt;We use &lt;a href=&quot;http://aws.amazon.com/s3/&quot;&gt;S3&lt;/a&gt; for a lot of our projects using the &lt;a href=&quot;http://amazon.rubyforge.org/&quot;&gt;aws-s3&lt;/a&gt; gem.  One thing that has continually plagued me is copying objects from one bucket to another.  Having rewritten this snippet of code twice already, I am placing it here for future reference.  Enjoy.&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;cl&quot;&gt;S3Object&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 2&lt;/span&gt;   &lt;span class=&quot;r&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;pc&quot;&gt;self&lt;/span&gt;.copy_across_buckets(src_bucket, src_key, dest_bucket, dest_key, options = {})
&lt;span class=&quot;no&quot;&gt; 3&lt;/span&gt;     original = open(url_for(src_key, src_bucket))
&lt;span class=&quot;no&quot;&gt; 4&lt;/span&gt;     default_options = {&lt;span class=&quot;sy&quot;&gt;:content_type&lt;/span&gt; =&amp;gt; original.content_type}
&lt;span class=&quot;no&quot;&gt; 5&lt;/span&gt;     store(dest_key, original, dest_bucket, default_options.merge(options))
&lt;span class=&quot;no&quot;&gt; 6&lt;/span&gt;     acl(dest_key, dest_bucket, acl(src_key, src_bucket))
&lt;span class=&quot;no&quot;&gt; 7&lt;/span&gt;   &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 8&lt;/span&gt; 
&lt;span class=&quot;no&quot;&gt; 9&lt;/span&gt;   &lt;span class=&quot;r&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;copy_to_bucket&lt;/span&gt;(dest_bucket, dest_key = &lt;span class=&quot;pc&quot;&gt;nil&lt;/span&gt;, options = {})
&lt;span class=&quot;no&quot;&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;/span&gt;     &lt;span class=&quot;pc&quot;&gt;self&lt;/span&gt;.class.copy_across_buckets(bucket.name, key, dest_bucket, dest_key ? dest_key : key, options)
&lt;span class=&quot;no&quot;&gt;11&lt;/span&gt;   &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  
  <entry>
    <title>RSpec stub_chain for Mocha</title>
    <link rel="alternate" type="text/html" href="http://blog.leshill.org/blog/2009/05/05/rspec-stub-chain-for-mocha.html" />
    
    <id>tag:blog.leshill.org,2009-05-05:1241576025</id>
    
    <published>2009-05-05T22:13:45-04:00</published>
    <updated>2009-05-05T22:13:45-04:00</updated>
    <content type="html">&lt;p&gt;I am not at &lt;a href=&quot;http://en.oreilly.com/rails2009&quot;&gt;RailsConf&lt;/a&gt; but I have been following the tweets of my coworkers, so I heard about &lt;a href=&quot;http://rspec.info&quot;&gt;RSpec&lt;/a&gt;&amp;#8216;s new &lt;code&gt;stub_chain&lt;/code&gt; method.  Since I prefer &lt;a href=&quot;http://mocha.rubyforge.org&quot;&gt;Mocha&lt;/a&gt;&amp;#8217;s syntax to that of the built-in RSpec stubbing framework, I created a monkey patch to add &lt;code&gt;stub_chain&lt;/code&gt; to Mocha:&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;cl&quot;&gt;StubChainMocha&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 2&lt;/span&gt;   &lt;span class=&quot;r&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;cl&quot;&gt;Object&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 3&lt;/span&gt;     &lt;span class=&quot;r&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;stub_chain&lt;/span&gt;(*methods)
&lt;span class=&quot;no&quot;&gt; 4&lt;/span&gt;       &lt;span class=&quot;r&quot;&gt;while&lt;/span&gt; methods.length &amp;gt; &lt;span class=&quot;i&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 5&lt;/span&gt;         stubs(methods.shift).returns(&lt;span class=&quot;pc&quot;&gt;self&lt;/span&gt;)
&lt;span class=&quot;no&quot;&gt; 6&lt;/span&gt;       &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 7&lt;/span&gt;       stubs(methods.shift)
&lt;span class=&quot;no&quot;&gt; 8&lt;/span&gt;     &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 9&lt;/span&gt;   &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;11&lt;/span&gt; 
&lt;span class=&quot;no&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;Object&lt;/span&gt;.send(&lt;span class=&quot;sy&quot;&gt;:include&lt;/span&gt;, &lt;span class=&quot;co&quot;&gt;StubChainMocha&lt;/span&gt;::&lt;span class=&quot;co&quot;&gt;Object&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Copy that into &lt;code&gt;spec/stub_chain_mocha.rb&lt;/code&gt; and then require it from &lt;code&gt;spec_helper.rb&lt;/code&gt;.&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>Pairing With Hitch</title>
    <link rel="alternate" type="text/html" href="http://blog.leshill.org/blog/2009/04/20/pairing-with-hitch.html" />
    
    <id>tag:blog.leshill.org,2009-04-20:1240258732</id>
    
    <published>2009-04-20T16:18:52-04:00</published>
    <updated>2009-04-20T16:18:52-04:00</updated>
    <content type="html">&lt;p&gt;Pair programming does present some unique problems, one that we encountered at &lt;a href=&quot;http://www.hashrocket.com&quot;&gt;Hashrocket&lt;/a&gt; was commit attribution: a commit message would be identified with one member of the pair only.  This is not exactly tragic, but from the perspective of a passioniate developer, having commit credit (and accountability) is a critical and visible part of the ethos.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://tpope.net&quot;&gt;Tim Pope&lt;/a&gt; had the brilliant idea of using a group email address with tags (such as &lt;em&gt;group+you@example.com&lt;/em&gt;) to identify the commits a pair made to git.  A little &lt;em&gt;bash script fu&lt;/em&gt; lead to a nifty command line utility that let us track pairs with our git commits.  With that script as a starting point, &lt;a href=&quot;http://blog.therubymug.com&quot;&gt;Ro Samour&lt;/a&gt; wrote a pure ruby implementation: &lt;code&gt;hitch&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;hitch&lt;/code&gt; will modify your git configuration to reflect who you are pairing with. Here is a &lt;code&gt;hitch&lt;/code&gt; commit message using &lt;code&gt;git log --pretty=full&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;commit e518dd0637e7d1d77d3bd79a645e5d0bc93eae2d
Author: Les Hill and Rogelio Samour &amp;lt;bleep+bleep+bleep@hashrocket.com&amp;gt;
Commit: Les Hill and Rogelio Samour &amp;lt;bleep+bleep+bleep@hashrocket.com&amp;gt;
 
    Adding show note icon&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is a commit message from &lt;code&gt;hitch&lt;/code&gt; on github:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/github_commit.png&quot; title=&quot;Github hitch commit message&quot; alt=&quot;Github hitch commit message&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;hitch&lt;/code&gt; is open source and is &lt;a href=&quot;http://github.com/therubymug/hitch/tree/master&quot;&gt;available&lt;/a&gt; from github.&lt;/p&gt;
&lt;h2&gt;Getting started&lt;/h2&gt;
&lt;p&gt;You will need to install the &lt;code&gt;hitch&lt;/code&gt; gem from github&lt;sup class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;% sudo gem install therubymug-hitch&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You will need a group email account with a service such as &lt;a href=&quot;http://mail.google.com&quot;&gt;GMail&lt;/a&gt; that allows email tags&lt;sup class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; (as an example, &lt;code&gt;news&lt;/code&gt; is a tag in this email address &lt;em&gt;yourname+news@example.com&lt;/em&gt; which is considered to be the same email address as &lt;em&gt;yourname@example.com&lt;/em&gt;):&lt;/p&gt;
&lt;p&gt;You really want a &lt;a href=&quot;http://gravatar.com&quot;&gt;Gravatar&lt;/a&gt; for your group email account so that the commits show the custom gravatar along with your commit messages.  For every pair, register a new gravatar and associate it with a tagged email address of the form:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dev+github_user_1+github_user_2@example.com&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The github usernames should appear in the local part of the address in alphabetical order after the group address local part, each github username seperated by a &lt;code&gt;+&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Initialize &lt;code&gt;hitch&lt;/code&gt; by running &lt;code&gt;hitchrc&lt;/code&gt; and giving it your name, github username, and group email address when prompted:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;% hitchrc&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Using &lt;code&gt;hitch&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;To pair with another developer whose github username is &lt;code&gt;pair&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;% hitch pair&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;hitch&lt;/code&gt; will prompt you if it does not recognize github username of your pair and save it for later use.&lt;/p&gt;
&lt;p&gt;To unpair and code solo:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;% unhitch&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To see who you are currently paired with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;% hitch&lt;/code&gt;&lt;/pre&gt;
&lt;p class=&quot;footnote&quot; id=&quot;fn1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt; Add &lt;code&gt;github.com&lt;/code&gt; to your gem sources with &lt;code&gt;gem sources -a http://gems.github.com/&lt;/code&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot; id=&quot;fn2&quot;&gt;&lt;sup&gt;2&lt;/sup&gt; Read about email tags on &lt;a href=&quot;http://en.wikipedia.org/wiki/E-mail_address#Sub-addressing&quot;&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;&lt;!-- #hashrocket --&gt;</content>
  </entry>
  
  <entry>
    <title>Most Bugs Fall to the Second Pair of Eyes</title>
    <link rel="alternate" type="text/html" href="http://blog.leshill.org/blog/2009/02/20/most-bugs-fall-to-the-second-pair-of-eyes.html" />
    
    <id>tag:blog.leshill.org,2009-02-20:1235183038</id>
    
    <published>2009-02-20T21:23:58-05:00</published>
    <updated>2009-02-20T21:23:58-05:00</updated>
    <content type="html">&lt;p&gt;While recently discussing if a power law applies to bugs at the ongoing seminar I sentimentally call &lt;em&gt;work&lt;/em&gt;, I noted a corollary to &lt;strong&gt;Linus&amp;#8217;s Law&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Linus&amp;#39;s_Law&quot;&gt;Linus&amp;#8217;s Law&lt;/a&gt; states:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Given enough eyeballs, all bugs are shallow&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The corollary is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Most bugs fall to the second pair of eyes&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That is, just having one other developer look at a bug will likely resolve it.  Of course, developer&amp;#8217;s who are &lt;a href=&quot;http://en.wikipedia.org/wiki/Pair_programming&quot;&gt;pair programming&lt;/a&gt; already know this and are ahead of the game.&lt;/p&gt;
&lt;p&gt;On a related note, pretty much every developer has been in the following situation.  You are called over by a collegue to look over a bug, often accompanied by the statement, &amp;#8216;This should work.&amp;#8217;  You give a cursory examination and you resolve the problem with a quick change, often one that is &lt;em&gt;obvious&lt;/em&gt; (after you pointed it out!)&lt;/p&gt;
&lt;p&gt;If you come away from that experience thinking &amp;#8216;Fresh pair of eyes&amp;#8217; or some such, good for you, you passed the test.&lt;/p&gt;
&lt;p&gt;If you come away from that experience thinking &amp;#8216;I am so awesome!&amp;#8217; or some such, not so good for you, you are probably not even competent.&lt;/p&gt;&lt;!-- #hashrocket --&gt;</content>
  </entry>
  
</feed>
